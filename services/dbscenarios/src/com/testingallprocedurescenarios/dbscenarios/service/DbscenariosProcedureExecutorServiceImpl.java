/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;

import com.testingallprocedurescenarios.dbscenarios.models.procedure.*;

@Service
public class DbscenariosProcedureExecutorServiceImpl implements DbscenariosProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DbscenariosProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("dbscenariosWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ProcedureGetByCurrentDateResponse executeProcedure_GetByCurrentDate() {
        Map<String, Object> params = new HashMap<>(0);


        return procedureExecutor.executeNamedProcedure("Procedure_GetByCurrentDate", params, ProcedureGetByCurrentDateResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public SvCurrentDateResponse executeSV_CurrentDate() {
        Map<String, Object> params = new HashMap<>(0);


        return procedureExecutor.executeNamedProcedure("SV_CurrentDate", params, SvCurrentDateResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Void executeProcedure_InsertQuery(Byte bytecol, Short shortcol, Integer intcol, Long longcol, Float floatcol, Double doublecol, BigDecimal bigdeccol, BigInteger bigintcol, Character charcol, String stringcol, String clobcol, String textcol, Date datecol, Time timecol, LocalDateTime datetimecol, Timestamp timestampcol, Boolean booleancol) {
        Map<String, Object> params = new HashMap<>(17);

        params.put("BYTECOL", bytecol);
        params.put("SHORTCOL", shortcol);
        params.put("INTCOL", intcol);
        params.put("LONGCOL", longcol);
        params.put("FLOATCOL", floatcol);
        params.put("DOUBLECOL", doublecol);
        params.put("BIGDECCOL", bigdeccol);
        params.put("BIGINTCOL", bigintcol);
        params.put("CHARCOL", charcol);
        params.put("STRINGCOL", stringcol);
        params.put("CLOBCOL", clobcol);
        params.put("TEXTCOL", textcol);
        params.put("DATECOL", datecol);
        params.put("TIMECOL", timecol);
        params.put("DATETIMECOL", datetimecol);
        params.put("TIMESTAMPCOL", timestampcol);
        params.put("BOOLEANCOL", booleancol);

        return procedureExecutor.executeNamedProcedure("Procedure_InsertQuery", params, Void.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ProcedureCurrentDatetimeResponse executeProcedure_CurrentDatetime(LocalDateTime datetimecol) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("DATETIMECOL", datetimecol);

        return procedureExecutor.executeNamedProcedure("Procedure_CurrentDatetime", params, ProcedureCurrentDatetimeResponse.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Void executeProcedure_Insert(Byte bytecol, Short shortcol, Integer intcol, Long longcol, Float floatcol, Double doublecol, BigDecimal bigdeccol, BigInteger bigintcol, Character charcol, String stringcol, String clobcol, String textcol, Date datecol, Time timecol, LocalDateTime datetimecol, Timestamp timestampcol, Boolean booleancol) {
        Map<String, Object> params = new HashMap<>(17);

        params.put("BYTECOL", bytecol);
        params.put("SHORTCOL", shortcol);
        params.put("INTCOL", intcol);
        params.put("LONGCOL", longcol);
        params.put("FLOATCOL", floatcol);
        params.put("DOUBLECOL", doublecol);
        params.put("BIGDECCOL", bigdeccol);
        params.put("BIGINTCOL", bigintcol);
        params.put("CHARCOL", charcol);
        params.put("STRINGCOL", stringcol);
        params.put("CLOBCOL", clobcol);
        params.put("TEXTCOL", textcol);
        params.put("DATECOL", datecol);
        params.put("TIMECOL", timecol);
        params.put("DATETIMECOL", datetimecol);
        params.put("TIMESTAMPCOL", timestampcol);
        params.put("BOOLEANCOL", booleancol);

        return procedureExecutor.executeNamedProcedure("Procedure_Insert", params, Void.class);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Void executeProcedure_InsertRequiredFalse(Byte bytecol, Short shortcol, Integer intcol, Long longcol, Float floatcol, Double doublecol, BigDecimal bigdeccol, BigInteger bigintcol, Character charcol, String stringcol, String clobcol, String textcol, Date datecol, Time timecol, LocalDateTime datetimecol, Timestamp timestampcol, Boolean booleancol) {
        Map<String, Object> params = new HashMap<>(17);

        params.put("BYTECOL", bytecol);
        params.put("SHORTCOL", shortcol);
        params.put("INTCOL", intcol);
        params.put("LONGCOL", longcol);
        params.put("FLOATCOL", floatcol);
        params.put("DOUBLECOL", doublecol);
        params.put("BIGDECCOL", bigdeccol);
        params.put("BIGINTCOL", bigintcol);
        params.put("CHARCOL", charcol);
        params.put("STRINGCOL", stringcol);
        params.put("CLOBCOL", clobcol);
        params.put("TEXTCOL", textcol);
        params.put("DATECOL", datecol);
        params.put("TIMECOL", timecol);
        params.put("DATETIMECOL", datetimecol);
        params.put("TIMESTAMPCOL", timestampcol);
        params.put("BOOLEANCOL", booleancol);

        return procedureExecutor.executeNamedProcedure("Procedure_InsertRequiredFalse", params, Void.class);
    }

}