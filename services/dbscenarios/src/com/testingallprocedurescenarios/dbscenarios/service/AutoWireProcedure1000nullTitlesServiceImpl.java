/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.dbscenarios.AutoWireProcedure1000nullTitles;


/**
 * ServiceImpl object for domain model class AutoWireProcedure1000nullTitles.
 *
 * @see AutoWireProcedure1000nullTitles
 */
@Service("dbscenarios.AutoWireProcedure1000nullTitlesService")
@Validated
public class AutoWireProcedure1000nullTitlesServiceImpl implements AutoWireProcedure1000nullTitlesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AutoWireProcedure1000nullTitlesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.AutoWireProcedure1000nullTitlesDao")
    private WMGenericDao<AutoWireProcedure1000nullTitles, Long> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AutoWireProcedure1000nullTitles, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AutoWireProcedure1000nullTitles create(AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles) {
        LOGGER.debug("Creating a new AutoWireProcedure1000nullTitles with information: {}", autoWireProcedure1000nullTitles);

        AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitlesCreated = this.wmGenericDao.create(autoWireProcedure1000nullTitles);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(autoWireProcedure1000nullTitlesCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public AutoWireProcedure1000nullTitles getById(Long autowireprocedure1000nulltitlesId) {
        LOGGER.debug("Finding AutoWireProcedure1000nullTitles by id: {}", autowireprocedure1000nulltitlesId);
        return this.wmGenericDao.findById(autowireprocedure1000nulltitlesId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public AutoWireProcedure1000nullTitles findById(Long autowireprocedure1000nulltitlesId) {
        LOGGER.debug("Finding AutoWireProcedure1000nullTitles by id: {}", autowireprocedure1000nulltitlesId);
        try {
            return this.wmGenericDao.findById(autowireprocedure1000nulltitlesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AutoWireProcedure1000nullTitles found with id: {}", autowireprocedure1000nulltitlesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<AutoWireProcedure1000nullTitles> findByMultipleIds(List<Long> autowireprocedure1000nulltitlesIds, boolean orderedReturn) {
        LOGGER.debug("Finding AutoWireProcedure1000nullTitles by ids: {}", autowireprocedure1000nulltitlesIds);

        return this.wmGenericDao.findByMultipleIds(autowireprocedure1000nulltitlesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public AutoWireProcedure1000nullTitles update(AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles) {
        LOGGER.debug("Updating AutoWireProcedure1000nullTitles with information: {}", autoWireProcedure1000nullTitles);

        this.wmGenericDao.update(autoWireProcedure1000nullTitles);
        this.wmGenericDao.refresh(autoWireProcedure1000nullTitles);

        return autoWireProcedure1000nullTitles;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AutoWireProcedure1000nullTitles partialUpdate(Long autowireprocedure1000nulltitlesId, Map<String, Object>autoWireProcedure1000nullTitlesPatch) {
        LOGGER.debug("Partially Updating the AutoWireProcedure1000nullTitles with id: {}", autowireprocedure1000nulltitlesId);

        AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles = getById(autowireprocedure1000nulltitlesId);

        try {
            ObjectReader autoWireProcedure1000nullTitlesReader = this.objectMapper.readerForUpdating(autoWireProcedure1000nullTitles);
            autoWireProcedure1000nullTitles = autoWireProcedure1000nullTitlesReader.readValue(this.objectMapper.writeValueAsString(autoWireProcedure1000nullTitlesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", autoWireProcedure1000nullTitlesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        autoWireProcedure1000nullTitles = update(autoWireProcedure1000nullTitles);

        return autoWireProcedure1000nullTitles;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AutoWireProcedure1000nullTitles delete(Long autowireprocedure1000nulltitlesId) {
        LOGGER.debug("Deleting AutoWireProcedure1000nullTitles with id: {}", autowireprocedure1000nulltitlesId);
        AutoWireProcedure1000nullTitles deleted = this.wmGenericDao.findById(autowireprocedure1000nulltitlesId);
        if (deleted == null) {
            LOGGER.debug("No AutoWireProcedure1000nullTitles found with id: {}", autowireprocedure1000nulltitlesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AutoWireProcedure1000nullTitles.class.getSimpleName(), autowireprocedure1000nulltitlesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles) {
        LOGGER.debug("Deleting AutoWireProcedure1000nullTitles with {}", autoWireProcedure1000nullTitles);
        this.wmGenericDao.delete(autoWireProcedure1000nullTitles);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AutoWireProcedure1000nullTitles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AutoWireProcedure1000nullTitles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AutoWireProcedure1000nullTitles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AutoWireProcedure1000nullTitles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table AutoWireProcedure1000nullTitles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table AutoWireProcedure1000nullTitles to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}