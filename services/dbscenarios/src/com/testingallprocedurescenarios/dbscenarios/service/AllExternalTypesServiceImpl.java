/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.dbscenarios.AllExternalTypes;


/**
 * ServiceImpl object for domain model class AllExternalTypes.
 *
 * @see AllExternalTypes
 */
@Service("dbscenarios.AllExternalTypesService")
@Validated
public class AllExternalTypesServiceImpl implements AllExternalTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllExternalTypesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.AllExternalTypesDao")
    private WMGenericDao<AllExternalTypes, Integer> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AllExternalTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AllExternalTypes create(AllExternalTypes allExternalTypes) {
        LOGGER.debug("Creating a new AllExternalTypes with information: {}", allExternalTypes);

        AllExternalTypes allExternalTypesCreated = this.wmGenericDao.create(allExternalTypes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allExternalTypesCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public AllExternalTypes getById(Integer allexternaltypesId) {
        LOGGER.debug("Finding AllExternalTypes by id: {}", allexternaltypesId);
        return this.wmGenericDao.findById(allexternaltypesId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public AllExternalTypes findById(Integer allexternaltypesId) {
        LOGGER.debug("Finding AllExternalTypes by id: {}", allexternaltypesId);
        try {
            return this.wmGenericDao.findById(allexternaltypesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AllExternalTypes found with id: {}", allexternaltypesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<AllExternalTypes> findByMultipleIds(List<Integer> allexternaltypesIds, boolean orderedReturn) {
        LOGGER.debug("Finding AllExternalTypes by ids: {}", allexternaltypesIds);

        return this.wmGenericDao.findByMultipleIds(allexternaltypesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public AllExternalTypes update(AllExternalTypes allExternalTypes) {
        LOGGER.debug("Updating AllExternalTypes with information: {}", allExternalTypes);

        this.wmGenericDao.update(allExternalTypes);
        this.wmGenericDao.refresh(allExternalTypes);

        return allExternalTypes;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AllExternalTypes partialUpdate(Integer allexternaltypesId, Map<String, Object>allExternalTypesPatch) {
        LOGGER.debug("Partially Updating the AllExternalTypes with id: {}", allexternaltypesId);

        AllExternalTypes allExternalTypes = getById(allexternaltypesId);

        try {
            ObjectReader allExternalTypesReader = this.objectMapper.readerForUpdating(allExternalTypes);
            allExternalTypes = allExternalTypesReader.readValue(this.objectMapper.writeValueAsString(allExternalTypesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", allExternalTypesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        allExternalTypes = update(allExternalTypes);

        return allExternalTypes;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public AllExternalTypes delete(Integer allexternaltypesId) {
        LOGGER.debug("Deleting AllExternalTypes with id: {}", allexternaltypesId);
        AllExternalTypes deleted = this.wmGenericDao.findById(allexternaltypesId);
        if (deleted == null) {
            LOGGER.debug("No AllExternalTypes found with id: {}", allexternaltypesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AllExternalTypes.class.getSimpleName(), allexternaltypesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(AllExternalTypes allExternalTypes) {
        LOGGER.debug("Deleting AllExternalTypes with {}", allExternalTypes);
        this.wmGenericDao.delete(allExternalTypes);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AllExternalTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllExternalTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AllExternalTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllExternalTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table AllExternalTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table AllExternalTypes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}