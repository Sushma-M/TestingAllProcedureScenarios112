/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.dbscenarios.ZeroAsPk;


/**
 * ServiceImpl object for domain model class ZeroAsPk.
 *
 * @see ZeroAsPk
 */
@Service("dbscenarios.ZeroAsPkService")
@Validated
public class ZeroAsPkServiceImpl implements ZeroAsPkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ZeroAsPkServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.ZeroAsPkDao")
    private WMGenericDao<ZeroAsPk, Integer> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<ZeroAsPk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ZeroAsPk create(ZeroAsPk zeroAsPk) {
        LOGGER.debug("Creating a new ZeroAsPk with information: {}", zeroAsPk);

        ZeroAsPk zeroAsPkCreated = this.wmGenericDao.create(zeroAsPk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(zeroAsPkCreated);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public ZeroAsPk getById(Integer zeroaspkId) {
        LOGGER.debug("Finding ZeroAsPk by id: {}", zeroaspkId);
        return this.wmGenericDao.findById(zeroaspkId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public ZeroAsPk findById(Integer zeroaspkId) {
        LOGGER.debug("Finding ZeroAsPk by id: {}", zeroaspkId);
        try {
            return this.wmGenericDao.findById(zeroaspkId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ZeroAsPk found with id: {}", zeroaspkId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<ZeroAsPk> findByMultipleIds(List<Integer> zeroaspkIds, boolean orderedReturn) {
        LOGGER.debug("Finding ZeroAsPks by ids: {}", zeroaspkIds);

        return this.wmGenericDao.findByMultipleIds(zeroaspkIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public ZeroAsPk update(ZeroAsPk zeroAsPk) {
        LOGGER.debug("Updating ZeroAsPk with information: {}", zeroAsPk);

        this.wmGenericDao.update(zeroAsPk);
        this.wmGenericDao.refresh(zeroAsPk);

        return zeroAsPk;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ZeroAsPk partialUpdate(Integer zeroaspkId, Map<String, Object>zeroAsPkPatch) {
        LOGGER.debug("Partially Updating the ZeroAsPk with id: {}", zeroaspkId);

        ZeroAsPk zeroAsPk = getById(zeroaspkId);

        try {
            ObjectReader zeroAsPkReader = this.objectMapper.readerForUpdating(zeroAsPk);
            zeroAsPk = zeroAsPkReader.readValue(this.objectMapper.writeValueAsString(zeroAsPkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", zeroAsPkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        zeroAsPk = update(zeroAsPk);

        return zeroAsPk;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public ZeroAsPk delete(Integer zeroaspkId) {
        LOGGER.debug("Deleting ZeroAsPk with id: {}", zeroaspkId);
        ZeroAsPk deleted = this.wmGenericDao.findById(zeroaspkId);
        if (deleted == null) {
            LOGGER.debug("No ZeroAsPk found with id: {}", zeroaspkId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ZeroAsPk.class.getSimpleName(), zeroaspkId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(ZeroAsPk zeroAsPk) {
        LOGGER.debug("Deleting ZeroAsPk with {}", zeroAsPk);
        this.wmGenericDao.delete(zeroAsPk);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<ZeroAsPk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ZeroAsPks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<ZeroAsPk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ZeroAsPks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table ZeroAsPk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table ZeroAsPk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}