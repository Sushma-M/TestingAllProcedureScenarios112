/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.dbscenarios.Table9;


/**
 * ServiceImpl object for domain model class Table9.
 *
 * @see Table9
 */
@Service("dbscenarios.Table9Service")
@Validated
public class Table9ServiceImpl implements Table9Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table9ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.Table9Dao")
    private WMGenericDao<Table9, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table9, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Table9 create(Table9 table9) {
        LOGGER.debug("Creating a new Table9 with information: {}", table9);

        Table9 table9Created = this.wmGenericDao.create(table9);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table9Created);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Table9 getById(String table9Id) {
        LOGGER.debug("Finding Table9 by id: {}", table9Id);
        return this.wmGenericDao.findById(table9Id);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Table9 findById(String table9Id) {
        LOGGER.debug("Finding Table9 by id: {}", table9Id);
        try {
            return this.wmGenericDao.findById(table9Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table9 found with id: {}", table9Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public List<Table9> findByMultipleIds(List<String> table9Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table9s by ids: {}", table9Ids);

        return this.wmGenericDao.findByMultipleIds(table9Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
    @Override
    public Table9 update(Table9 table9) {
        LOGGER.debug("Updating Table9 with information: {}", table9);

        this.wmGenericDao.update(table9);
        this.wmGenericDao.refresh(table9);

        return table9;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Table9 delete(String table9Id) {
        LOGGER.debug("Deleting Table9 with id: {}", table9Id);
        Table9 deleted = this.wmGenericDao.findById(table9Id);
        if (deleted == null) {
            LOGGER.debug("No Table9 found with id: {}", table9Id);
            throw new EntityNotFoundException(String.valueOf(table9Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public void delete(Table9 table9) {
        LOGGER.debug("Deleting Table9 with {}", table9);
        this.wmGenericDao.delete(table9);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Table9> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table9s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Table9> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table9s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Table9 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbscenarios for table Table9 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}