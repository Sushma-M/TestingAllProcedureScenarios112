/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.dbscenarios.DbtYpes;
import com.testingallprocedurescenarios.dbscenarios.service.DbtYpesService;


/**
 * Controller object for domain model class DbtYpes.
 * @see DbtYpes
 */
@RestController("dbscenarios.DbtYpesController")
@Api(value = "DbtYpesController", description = "Exposes APIs to work with DbtYpes resource.")
@RequestMapping("/dbscenarios/DbtYpes")
public class DbtYpesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DbtYpesController.class);

    @Autowired
	@Qualifier("dbscenarios.DbtYpesService")
	private DbtYpesService dbtYpesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new DbtYpes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbtYpes createDbtYpes(@RequestBody DbtYpes dbtYpes) {
		LOGGER.debug("Create DbtYpes with information: {}" , dbtYpes);

		dbtYpes = dbtYpesService.create(dbtYpes);
		LOGGER.debug("Created DbtYpes with information: {}" , dbtYpes);

	    return dbtYpes;
	}

    @ApiOperation(value = "Returns the DbtYpes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbtYpes getDbtYpes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting DbtYpes with id: {}" , id);

        DbtYpes foundDbtYpes = dbtYpesService.getById(id);
        LOGGER.debug("DbtYpes details with id: {}" , foundDbtYpes);

        return foundDbtYpes;
    }

    @ApiOperation(value = "Updates the DbtYpes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbtYpes editDbtYpes(@PathVariable("id") Integer id, @RequestBody DbtYpes dbtYpes) {
        LOGGER.debug("Editing DbtYpes with id: {}" , dbtYpes.getId());

        dbtYpes.setId(id);
        dbtYpes = dbtYpesService.update(dbtYpes);
        LOGGER.debug("DbtYpes details with id: {}" , dbtYpes);

        return dbtYpes;
    }
    
    @ApiOperation(value = "Partially updates the DbtYpes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DbtYpes patchDbtYpes(@PathVariable("id") Integer id, @RequestBody @MapTo(DbtYpes.class) Map<String, Object> dbtYpesPatch) {
        LOGGER.debug("Partially updating DbtYpes with id: {}" , id);

        DbtYpes dbtYpes = dbtYpesService.partialUpdate(id, dbtYpesPatch);
        LOGGER.debug("DbtYpes details after partial update: {}" , dbtYpes);

        return dbtYpes;
    }

    @ApiOperation(value = "Deletes the DbtYpes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDbtYpes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting DbtYpes with id: {}" , id);

        DbtYpes deletedDbtYpes = dbtYpesService.delete(id);

        return deletedDbtYpes != null;
    }

    /**
     * @deprecated Use {@link #findDbtYpes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DbtYpes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DbtYpes> searchDbtYpesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DbtYpes list by query filter:{}", (Object) queryFilters);
        return dbtYpesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DbtYpes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DbtYpes> findDbtYpes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DbtYpes list by filter:", query);
        return dbtYpesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DbtYpes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<DbtYpes> filterDbtYpes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DbtYpes list by filter", query);
        return dbtYpesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportDbtYpes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return dbtYpesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportDbtYpesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = DbtYpes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> dbtYpesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of DbtYpes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countDbtYpes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DbtYpes");
		return dbtYpesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getDbtYpesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return dbtYpesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DbtYpesService instance
	 */
	protected void setDbtYpesService(DbtYpesService service) {
		this.dbtYpesService = service;
	}

}