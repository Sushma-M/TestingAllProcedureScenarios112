/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.dbscenarios.AutoWireProcedure1000nullTitles;
import com.testingallprocedurescenarios.dbscenarios.service.AutoWireProcedure1000nullTitlesService;


/**
 * Controller object for domain model class AutoWireProcedure1000nullTitles.
 * @see AutoWireProcedure1000nullTitles
 */
@RestController("dbscenarios.AutoWireProcedure1000nullTitlesController")
@Api(value = "AutoWireProcedure1000nullTitlesController", description = "Exposes APIs to work with AutoWireProcedure1000nullTitles resource.")
@RequestMapping("/dbscenarios/AutoWireProcedure1000nullTitles")
public class AutoWireProcedure1000nullTitlesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AutoWireProcedure1000nullTitlesController.class);

    @Autowired
	@Qualifier("dbscenarios.AutoWireProcedure1000nullTitlesService")
	private AutoWireProcedure1000nullTitlesService autoWireProcedure1000nullTitlesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AutoWireProcedure1000nullTitles instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AutoWireProcedure1000nullTitles createAutoWireProcedure1000nullTitles(@RequestBody AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles) {
		LOGGER.debug("Create AutoWireProcedure1000nullTitles with information: {}" , autoWireProcedure1000nullTitles);

		autoWireProcedure1000nullTitles = autoWireProcedure1000nullTitlesService.create(autoWireProcedure1000nullTitles);
		LOGGER.debug("Created AutoWireProcedure1000nullTitles with information: {}" , autoWireProcedure1000nullTitles);

	    return autoWireProcedure1000nullTitles;
	}

    @ApiOperation(value = "Returns the AutoWireProcedure1000nullTitles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AutoWireProcedure1000nullTitles getAutoWireProcedure1000nullTitles(@PathVariable("id") Long id) {
        LOGGER.debug("Getting AutoWireProcedure1000nullTitles with id: {}" , id);

        AutoWireProcedure1000nullTitles foundAutoWireProcedure1000nullTitles = autoWireProcedure1000nullTitlesService.getById(id);
        LOGGER.debug("AutoWireProcedure1000nullTitles details with id: {}" , foundAutoWireProcedure1000nullTitles);

        return foundAutoWireProcedure1000nullTitles;
    }

    @ApiOperation(value = "Updates the AutoWireProcedure1000nullTitles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AutoWireProcedure1000nullTitles editAutoWireProcedure1000nullTitles(@PathVariable("id") Long id, @RequestBody AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles) {
        LOGGER.debug("Editing AutoWireProcedure1000nullTitles with id: {}" , autoWireProcedure1000nullTitles.getId());

        autoWireProcedure1000nullTitles.setId(id);
        autoWireProcedure1000nullTitles = autoWireProcedure1000nullTitlesService.update(autoWireProcedure1000nullTitles);
        LOGGER.debug("AutoWireProcedure1000nullTitles details with id: {}" , autoWireProcedure1000nullTitles);

        return autoWireProcedure1000nullTitles;
    }
    
    @ApiOperation(value = "Partially updates the AutoWireProcedure1000nullTitles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AutoWireProcedure1000nullTitles patchAutoWireProcedure1000nullTitles(@PathVariable("id") Long id, @RequestBody @MapTo(AutoWireProcedure1000nullTitles.class) Map<String, Object> autoWireProcedure1000nullTitlesPatch) {
        LOGGER.debug("Partially updating AutoWireProcedure1000nullTitles with id: {}" , id);

        AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles = autoWireProcedure1000nullTitlesService.partialUpdate(id, autoWireProcedure1000nullTitlesPatch);
        LOGGER.debug("AutoWireProcedure1000nullTitles details after partial update: {}" , autoWireProcedure1000nullTitles);

        return autoWireProcedure1000nullTitles;
    }

    @ApiOperation(value = "Deletes the AutoWireProcedure1000nullTitles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAutoWireProcedure1000nullTitles(@PathVariable("id") Long id) {
        LOGGER.debug("Deleting AutoWireProcedure1000nullTitles with id: {}" , id);

        AutoWireProcedure1000nullTitles deletedAutoWireProcedure1000nullTitles = autoWireProcedure1000nullTitlesService.delete(id);

        return deletedAutoWireProcedure1000nullTitles != null;
    }

    /**
     * @deprecated Use {@link #findAutoWireProcedure1000nullTitles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AutoWireProcedure1000nullTitles instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AutoWireProcedure1000nullTitles> searchAutoWireProcedure1000nullTitlesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AutoWireProcedure1000nullTitles list by query filter:{}", (Object) queryFilters);
        return autoWireProcedure1000nullTitlesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AutoWireProcedure1000nullTitles instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AutoWireProcedure1000nullTitles> findAutoWireProcedure1000nullTitles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AutoWireProcedure1000nullTitles list by filter:", query);
        return autoWireProcedure1000nullTitlesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AutoWireProcedure1000nullTitles instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<AutoWireProcedure1000nullTitles> filterAutoWireProcedure1000nullTitles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AutoWireProcedure1000nullTitles list by filter", query);
        return autoWireProcedure1000nullTitlesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportAutoWireProcedure1000nullTitles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return autoWireProcedure1000nullTitlesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportAutoWireProcedure1000nullTitlesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AutoWireProcedure1000nullTitles.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> autoWireProcedure1000nullTitlesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AutoWireProcedure1000nullTitles instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countAutoWireProcedure1000nullTitles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AutoWireProcedure1000nullTitles");
		return autoWireProcedure1000nullTitlesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getAutoWireProcedure1000nullTitlesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return autoWireProcedure1000nullTitlesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AutoWireProcedure1000nullTitlesService instance
	 */
	protected void setAutoWireProcedure1000nullTitlesService(AutoWireProcedure1000nullTitlesService service) {
		this.autoWireProcedure1000nullTitlesService = service;
	}

}