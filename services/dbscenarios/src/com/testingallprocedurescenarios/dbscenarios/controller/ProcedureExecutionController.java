/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testingallprocedurescenarios.dbscenarios.service.DbscenariosProcedureExecutorService;
import com.testingallprocedurescenarios.dbscenarios.models.procedure.*;

@RestController(value = "Dbscenarios.ProcedureExecutionController")
@RequestMapping("/dbscenarios/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private DbscenariosProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Procedure_GetByCurrentDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Data by Current Date")
    public ProcedureGetByCurrentDateResponse executeProcedure_GetByCurrentDate(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_GetByCurrentDate");
        ProcedureGetByCurrentDateResponse _result = procedureService.executeProcedure_GetByCurrentDate();
        LOGGER.debug("got the result for named procedure: Procedure_GetByCurrentDate, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/SV_CurrentDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Current Date")
    public SvCurrentDateResponse executeSV_CurrentDate(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: SV_CurrentDate");
        SvCurrentDateResponse _result = procedureService.executeSV_CurrentDate();
        LOGGER.debug("got the result for named procedure: SV_CurrentDate, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_InsertQuery", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Procedure with insert query")
    public Void executeProcedure_InsertQuery(@RequestParam(value = "BYTECOL") Byte bytecol, @RequestParam(value = "SHORTCOL") Short shortcol, @RequestParam(value = "INTCOL") Integer intcol, @RequestParam(value = "LONGCOL") Long longcol, @RequestParam(value = "FLOATCOL") Float floatcol, @RequestParam(value = "DOUBLECOL") Double doublecol, @RequestParam(value = "BIGDECCOL") BigDecimal bigdeccol, @RequestParam(value = "BIGINTCOL") BigInteger bigintcol, @RequestParam(value = "CHARCOL") Character charcol, @RequestParam(value = "STRINGCOL") String stringcol, @RequestParam(value = "CLOBCOL") String clobcol, @RequestParam(value = "TEXTCOL") String textcol, @RequestParam(value = "DATECOL") Date datecol, @RequestParam(value = "TIMECOL") Time timecol, @RequestParam(value = "DATETIMECOL") LocalDateTime datetimecol, @RequestParam(value = "TIMESTAMPCOL") Timestamp timestampcol, @RequestParam(value = "BOOLEANCOL") Boolean booleancol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_InsertQuery");
        Void _result = procedureService.executeProcedure_InsertQuery(bytecol, shortcol, intcol, longcol, floatcol, doublecol, bigdeccol, bigintcol, charcol, stringcol, clobcol, textcol, datecol, timecol, datetimecol, timestampcol, booleancol);
        LOGGER.debug("got the result for named procedure: Procedure_InsertQuery, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_CurrentDatetime", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CurrentDatetime")
    public ProcedureCurrentDatetimeResponse executeProcedure_CurrentDatetime(@RequestParam(value = "DATETIMECOL") LocalDateTime datetimecol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_CurrentDatetime");
        ProcedureCurrentDatetimeResponse _result = procedureService.executeProcedure_CurrentDatetime(datetimecol);
        LOGGER.debug("got the result for named procedure: Procedure_CurrentDatetime, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_Insert", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert Procedure")
    public Void executeProcedure_Insert(@RequestParam(value = "BYTECOL") Byte bytecol, @RequestParam(value = "SHORTCOL") Short shortcol, @RequestParam(value = "INTCOL") Integer intcol, @RequestParam(value = "LONGCOL") Long longcol, @RequestParam(value = "FLOATCOL") Float floatcol, @RequestParam(value = "DOUBLECOL") Double doublecol, @RequestParam(value = "BIGDECCOL") BigDecimal bigdeccol, @RequestParam(value = "BIGINTCOL") BigInteger bigintcol, @RequestParam(value = "CHARCOL") Character charcol, @RequestParam(value = "STRINGCOL") String stringcol, @RequestParam(value = "CLOBCOL") String clobcol, @RequestParam(value = "TEXTCOL") String textcol, @RequestParam(value = "DATECOL") Date datecol, @RequestParam(value = "TIMECOL") Time timecol, @RequestParam(value = "DATETIMECOL") LocalDateTime datetimecol, @RequestParam(value = "TIMESTAMPCOL") Timestamp timestampcol, @RequestParam(value = "BOOLEANCOL") Boolean booleancol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_Insert");
        Void _result = procedureService.executeProcedure_Insert(bytecol, shortcol, intcol, longcol, floatcol, doublecol, bigdeccol, bigintcol, charcol, stringcol, clobcol, textcol, datecol, timecol, datetimecol, timestampcol, booleancol);
        LOGGER.debug("got the result for named procedure: Procedure_Insert, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_InsertRequiredFalse", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert procedure Required False")
    public Void executeProcedure_InsertRequiredFalse(@RequestParam(value = "BYTECOL", required = false) Byte bytecol, @RequestParam(value = "SHORTCOL", required = false) Short shortcol, @RequestParam(value = "INTCOL", required = false) Integer intcol, @RequestParam(value = "LONGCOL", required = false) Long longcol, @RequestParam(value = "FLOATCOL", required = false) Float floatcol, @RequestParam(value = "DOUBLECOL", required = false) Double doublecol, @RequestParam(value = "BIGDECCOL", required = false) BigDecimal bigdeccol, @RequestParam(value = "BIGINTCOL", required = false) BigInteger bigintcol, @RequestParam(value = "CHARCOL", required = false) Character charcol, @RequestParam(value = "STRINGCOL", required = false) String stringcol, @RequestParam(value = "CLOBCOL", required = false) String clobcol, @RequestParam(value = "TEXTCOL", required = false) String textcol, @RequestParam(value = "DATECOL", required = false) Date datecol, @RequestParam(value = "TIMECOL", required = false) Time timecol, @RequestParam(value = "DATETIMECOL", required = false) LocalDateTime datetimecol, @RequestParam(value = "TIMESTAMPCOL", required = false) Timestamp timestampcol, @RequestParam(value = "BOOLEANCOL", required = false) Boolean booleancol, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_InsertRequiredFalse");
        Void _result = procedureService.executeProcedure_InsertRequiredFalse(bytecol, shortcol, intcol, longcol, floatcol, doublecol, bigdeccol, bigintcol, charcol, stringcol, clobcol, textcol, datecol, timecol, datetimecol, timestampcol, booleancol);
        LOGGER.debug("got the result for named procedure: Procedure_InsertRequiredFalse, result:{}", _result);
        return _result;
    }

}