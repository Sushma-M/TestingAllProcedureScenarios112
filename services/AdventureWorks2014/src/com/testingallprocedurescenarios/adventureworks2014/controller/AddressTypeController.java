/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.adventureworks2014.AddressType;
import com.testingallprocedurescenarios.adventureworks2014.service.AddressTypeService;


/**
 * Controller object for domain model class AddressType.
 * @see AddressType
 */
@RestController("AdventureWorks2014.AddressTypeController")
@Api(value = "AddressTypeController", description = "Exposes APIs to work with AddressType resource.")
@RequestMapping("/AdventureWorks2014/AddressType")
public class AddressTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddressTypeController.class);

    @Autowired
	@Qualifier("AdventureWorks2014.AddressTypeService")
	private AddressTypeService addressTypeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AddressType instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AddressType createAddressType(@RequestBody AddressType addressType) {
		LOGGER.debug("Create AddressType with information: {}" , addressType);

		addressType = addressTypeService.create(addressType);
		LOGGER.debug("Created AddressType with information: {}" , addressType);

	    return addressType;
	}

    @ApiOperation(value = "Returns the AddressType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AddressType getAddressType(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AddressType with id: {}" , id);

        AddressType foundAddressType = addressTypeService.getById(id);
        LOGGER.debug("AddressType details with id: {}" , foundAddressType);

        return foundAddressType;
    }

    @ApiOperation(value = "Updates the AddressType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AddressType editAddressType(@PathVariable("id") Integer id, @RequestBody AddressType addressType) {
        LOGGER.debug("Editing AddressType with id: {}" , addressType.getAddressTypeId());

        addressType.setAddressTypeId(id);
        addressType = addressTypeService.update(addressType);
        LOGGER.debug("AddressType details with id: {}" , addressType);

        return addressType;
    }

    @ApiOperation(value = "Deletes the AddressType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAddressType(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AddressType with id: {}" , id);

        AddressType deletedAddressType = addressTypeService.delete(id);

        return deletedAddressType != null;
    }

    @RequestMapping(value = "/rowguid/{rowguid}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching AddressType with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AddressType getByRowguid(@PathVariable("rowguid") String rowguid) {
        LOGGER.debug("Getting AddressType with uniques key Rowguid");
        return addressTypeService.getByRowguid(rowguid);
    }

    @RequestMapping(value = "/name/{name}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching AddressType with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AddressType getByName(@PathVariable("name") String name) {
        LOGGER.debug("Getting AddressType with uniques key Name");
        return addressTypeService.getByName(name);
    }

    /**
     * @deprecated Use {@link #findAddressTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AddressType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AddressType> searchAddressTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AddressTypes list by query filter:{}", (Object) queryFilters);
        return addressTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AddressType instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AddressType> findAddressTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AddressTypes list by filter:", query);
        return addressTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AddressType instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AddressType> filterAddressTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AddressTypes list by filter", query);
        return addressTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAddressTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return addressTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAddressTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AddressType.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> addressTypeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AddressType instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAddressTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AddressTypes");
		return addressTypeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAddressTypeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return addressTypeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AddressTypeService instance
	 */
	protected void setAddressTypeService(AddressTypeService service) {
		this.addressTypeService = service;
	}

}