/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.adventureworks2014.Address;
import com.testingallprocedurescenarios.adventureworks2014.StateProvince;
import com.testingallprocedurescenarios.adventureworks2014.service.StateProvinceService;


/**
 * Controller object for domain model class StateProvince.
 * @see StateProvince
 */
@RestController("AdventureWorks2014.StateProvinceController")
@Api(value = "StateProvinceController", description = "Exposes APIs to work with StateProvince resource.")
@RequestMapping("/AdventureWorks2014/StateProvince")
public class StateProvinceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StateProvinceController.class);

    @Autowired
	@Qualifier("AdventureWorks2014.StateProvinceService")
	private StateProvinceService stateProvinceService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new StateProvince instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StateProvince createStateProvince(@RequestBody StateProvince stateProvince) {
		LOGGER.debug("Create StateProvince with information: {}" , stateProvince);

		stateProvince = stateProvinceService.create(stateProvince);
		LOGGER.debug("Created StateProvince with information: {}" , stateProvince);

	    return stateProvince;
	}

    @ApiOperation(value = "Returns the StateProvince instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StateProvince getStateProvince(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting StateProvince with id: {}" , id);

        StateProvince foundStateProvince = stateProvinceService.getById(id);
        LOGGER.debug("StateProvince details with id: {}" , foundStateProvince);

        return foundStateProvince;
    }

    @ApiOperation(value = "Updates the StateProvince instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StateProvince editStateProvince(@PathVariable("id") Integer id, @RequestBody StateProvince stateProvince) {
        LOGGER.debug("Editing StateProvince with id: {}" , stateProvince.getStateProvinceId());

        stateProvince.setStateProvinceId(id);
        stateProvince = stateProvinceService.update(stateProvince);
        LOGGER.debug("StateProvince details with id: {}" , stateProvince);

        return stateProvince;
    }

    @ApiOperation(value = "Deletes the StateProvince instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStateProvince(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting StateProvince with id: {}" , id);

        StateProvince deletedStateProvince = stateProvinceService.delete(id);

        return deletedStateProvince != null;
    }

    @RequestMapping(value = "/rowguid/{rowguid}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching StateProvince with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StateProvince getByRowguid(@PathVariable("rowguid") String rowguid) {
        LOGGER.debug("Getting StateProvince with uniques key Rowguid");
        return stateProvinceService.getByRowguid(rowguid);
    }

    @RequestMapping(value = "/stateProvinceCode-countryRegionCode", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching StateProvince with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StateProvince getByStateProvinceCodeAndCountryRegionCode(@RequestParam("stateProvinceCode") String stateProvinceCode, @RequestParam("countryRegionCode") String countryRegionCode) {
        LOGGER.debug("Getting StateProvince with uniques key StateProvinceCodeAndCountryRegionCode");
        return stateProvinceService.getByStateProvinceCodeAndCountryRegionCode(stateProvinceCode, countryRegionCode);
    }

    @RequestMapping(value = "/name/{name}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching StateProvince with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StateProvince getByName(@PathVariable("name") String name) {
        LOGGER.debug("Getting StateProvince with uniques key Name");
        return stateProvinceService.getByName(name);
    }

    /**
     * @deprecated Use {@link #findStateProvinces(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of StateProvince instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StateProvince> searchStateProvincesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StateProvinces list by query filter:{}", (Object) queryFilters);
        return stateProvinceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of StateProvince instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StateProvince> findStateProvinces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StateProvinces list by filter:", query);
        return stateProvinceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of StateProvince instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StateProvince> filterStateProvinces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StateProvinces list by filter", query);
        return stateProvinceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStateProvinces(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return stateProvinceService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportStateProvincesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = StateProvince.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> stateProvinceService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of StateProvince instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countStateProvinces( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting StateProvinces");
		return stateProvinceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getStateProvinceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return stateProvinceService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/addresses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the addresses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Address> findAssociatedAddresses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated addresses");
        return stateProvinceService.findAssociatedAddresses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StateProvinceService instance
	 */
	protected void setStateProvinceService(StateProvinceService service) {
		this.stateProvinceService = service;
	}

}