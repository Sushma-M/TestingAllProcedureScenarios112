/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testingallprocedurescenarios.adventureworks2014.service.AdventureWorks2014QueryExecutorService;
import com.testingallprocedurescenarios.adventureworks2014.models.query.*;

@RestController(value = "AdventureWorks2014.QueryExecutionController")
@RequestMapping("/AdventureWorks2014/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private AdventureWorks2014QueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/SV_GetPersonByPersonType", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Person by Person Type")
    public Page<SvGetPersonByPersonTypeResponse> executeSV_GetPersonByPersonType(@RequestParam(value = "PersonType") String personType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetPersonByPersonType");
        Page<SvGetPersonByPersonTypeResponse> _result = queryService.executeSV_GetPersonByPersonType(personType, pageable);
        LOGGER.debug("got the result for named query: SV_GetPersonByPersonType, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SV_GetPersonByPersonType")
    @RequestMapping(value = "/queries/SV_GetPersonByPersonType/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSV_GetPersonByPersonType(@RequestParam(value = "PersonType") String personType, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SV_GetPersonByPersonType");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SV_GetPersonByPersonType";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSV_GetPersonByPersonType(personType,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SV_PersonSingleRecord", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Person Get Single Record")
    public SvPersonSingleRecordResponse executeSV_PersonSingleRecord(HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_PersonSingleRecord");
        SvPersonSingleRecordResponse _result = queryService.executeSV_PersonSingleRecord();
        LOGGER.debug("got the result for named query: SV_PersonSingleRecord, result:{}", _result);
        return _result;
    }

}