/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testingallprocedurescenarios.adventureworks2014.service.AdventureWorks2014ProcedureExecutorService;
import com.testingallprocedurescenarios.adventureworks2014.models.procedure.*;

@RestController(value = "AdventureWorks2014.ProcedureExecutionController")
@RequestMapping("/AdventureWorks2014/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private AdventureWorks2014ProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Procedure_GetByHireDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get By Hire Date")
    public ProcedureGetByHireDateResponse executeProcedure_GetByHireDate(@RequestParam(value = "empHireDate") Date empHireDate, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_GetByHireDate");
        ProcedureGetByHireDateResponse _result = procedureService.executeProcedure_GetByHireDate(empHireDate);
        LOGGER.debug("got the result for named procedure: Procedure_GetByHireDate, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_1000NullTitles", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "1000 Null titles")
    public Procedure1000nullTitlesResponse executeProcedure_1000NullTitles(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_1000NullTitles");
        Procedure1000nullTitlesResponse _result = procedureService.executeProcedure_1000NullTitles();
        LOGGER.debug("got the result for named procedure: Procedure_1000NullTitles, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_getDeptDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Dept Details By DeptId")
    public ProcedureGetDeptDetailsResponse executeProcedure_getDeptDetails(@RequestParam(value = "deptid") Integer deptid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_getDeptDetails");
        ProcedureGetDeptDetailsResponse _result = procedureService.executeProcedure_getDeptDetails(deptid);
        LOGGER.debug("got the result for named procedure: Procedure_getDeptDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Porcedure_DeptNameUsingID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Fetching Dept Name using DeptId")
    public PorcedureDeptNameUsingIdResponse executePorcedure_DeptNameUsingID(@RequestParam(value = "deptid") Integer deptid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Porcedure_DeptNameUsingID");
        PorcedureDeptNameUsingIdResponse _result = procedureService.executePorcedure_DeptNameUsingID(deptid);
        LOGGER.debug("got the result for named procedure: Porcedure_DeptNameUsingID, result:{}", _result);
        return _result;
    }

}