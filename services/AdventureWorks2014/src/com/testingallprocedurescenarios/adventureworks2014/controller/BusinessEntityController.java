/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.adventureworks2014.BusinessEntity;
import com.testingallprocedurescenarios.adventureworks2014.Person;
import com.testingallprocedurescenarios.adventureworks2014.service.BusinessEntityService;


/**
 * Controller object for domain model class BusinessEntity.
 * @see BusinessEntity
 */
@RestController("AdventureWorks2014.BusinessEntityController")
@Api(value = "BusinessEntityController", description = "Exposes APIs to work with BusinessEntity resource.")
@RequestMapping("/AdventureWorks2014/BusinessEntity")
public class BusinessEntityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessEntityController.class);

    @Autowired
	@Qualifier("AdventureWorks2014.BusinessEntityService")
	private BusinessEntityService businessEntityService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new BusinessEntity instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BusinessEntity createBusinessEntity(@RequestBody BusinessEntity businessEntity) {
		LOGGER.debug("Create BusinessEntity with information: {}" , businessEntity);

		businessEntity = businessEntityService.create(businessEntity);
		LOGGER.debug("Created BusinessEntity with information: {}" , businessEntity);

	    return businessEntity;
	}

    @ApiOperation(value = "Returns the BusinessEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BusinessEntity getBusinessEntity(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting BusinessEntity with id: {}" , id);

        BusinessEntity foundBusinessEntity = businessEntityService.getById(id);
        LOGGER.debug("BusinessEntity details with id: {}" , foundBusinessEntity);

        return foundBusinessEntity;
    }

    @ApiOperation(value = "Updates the BusinessEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BusinessEntity editBusinessEntity(@PathVariable("id") Integer id, @RequestBody BusinessEntity businessEntity) {
        LOGGER.debug("Editing BusinessEntity with id: {}" , businessEntity.getBusinessEntityId());

        businessEntity.setBusinessEntityId(id);
        businessEntity = businessEntityService.update(businessEntity);
        LOGGER.debug("BusinessEntity details with id: {}" , businessEntity);

        return businessEntity;
    }

    @ApiOperation(value = "Deletes the BusinessEntity instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinessEntity(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting BusinessEntity with id: {}" , id);

        BusinessEntity deletedBusinessEntity = businessEntityService.delete(id);

        return deletedBusinessEntity != null;
    }

    @RequestMapping(value = "/rowguid/{rowguid}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching BusinessEntity with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BusinessEntity getByRowguid(@PathVariable("rowguid") String rowguid) {
        LOGGER.debug("Getting BusinessEntity with uniques key Rowguid");
        return businessEntityService.getByRowguid(rowguid);
    }

    /**
     * @deprecated Use {@link #findBusinessEntities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BusinessEntity instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BusinessEntity> searchBusinessEntitiesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BusinessEntities list by query filter:{}", (Object) queryFilters);
        return businessEntityService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BusinessEntity instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BusinessEntity> findBusinessEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BusinessEntities list by filter:", query);
        return businessEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BusinessEntity instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BusinessEntity> filterBusinessEntities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BusinessEntities list by filter", query);
        return businessEntityService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinessEntities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businessEntityService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportBusinessEntitiesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = BusinessEntity.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> businessEntityService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of BusinessEntity instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinessEntities( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BusinessEntities");
		return businessEntityService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinessEntityAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businessEntityService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/personsForPerson1BusinessEntityId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personsForPerson1BusinessEntityId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Person> findAssociatedPersonsForPerson1BusinessEntityId(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personsForPerson1BusinessEntityId");
        return businessEntityService.findAssociatedPersonsForPerson1BusinessEntityId(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessEntityService instance
	 */
	protected void setBusinessEntityService(BusinessEntityService service) {
		this.businessEntityService = service;
	}

}