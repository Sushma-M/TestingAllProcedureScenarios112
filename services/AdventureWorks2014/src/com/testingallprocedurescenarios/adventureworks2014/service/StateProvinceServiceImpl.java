/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.adventureworks2014.Address;
import com.testingallprocedurescenarios.adventureworks2014.StateProvince;


/**
 * ServiceImpl object for domain model class StateProvince.
 *
 * @see StateProvince
 */
@Service("AdventureWorks2014.StateProvinceService")
@Validated
public class StateProvinceServiceImpl implements StateProvinceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StateProvinceServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AdventureWorks2014.AddressService")
    private AddressService addressService;

    @Autowired
    @Qualifier("AdventureWorks2014.StateProvinceDao")
    private WMGenericDao<StateProvince, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StateProvince, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince create(StateProvince stateProvince) {
        LOGGER.debug("Creating a new StateProvince with information: {}", stateProvince);

        StateProvince stateProvinceCreated = this.wmGenericDao.create(stateProvince);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(stateProvinceCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince getById(Integer stateprovinceId) {
        LOGGER.debug("Finding StateProvince by id: {}", stateprovinceId);
        return this.wmGenericDao.findById(stateprovinceId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince findById(Integer stateprovinceId) {
        LOGGER.debug("Finding StateProvince by id: {}", stateprovinceId);
        try {
            return this.wmGenericDao.findById(stateprovinceId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No StateProvince found with id: {}", stateprovinceId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<StateProvince> findByMultipleIds(List<Integer> stateprovinceIds, boolean orderedReturn) {
        LOGGER.debug("Finding StateProvinces by ids: {}", stateprovinceIds);

        return this.wmGenericDao.findByMultipleIds(stateprovinceIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince getByRowguid(String rowguid) {
        Map<String, Object> rowguidMap = new HashMap<>();
        rowguidMap.put("rowguid", rowguid);

        LOGGER.debug("Finding StateProvince by unique keys: {}", rowguidMap);
        return this.wmGenericDao.findByUniqueKey(rowguidMap);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince getByStateProvinceCodeAndCountryRegionCode(String stateProvinceCode, String countryRegionCode) {
        Map<String, Object> stateProvinceCodeAndCountryRegionCodeMap = new HashMap<>();
        stateProvinceCodeAndCountryRegionCodeMap.put("stateProvinceCode", stateProvinceCode);
        stateProvinceCodeAndCountryRegionCodeMap.put("countryRegionCode", countryRegionCode);

        LOGGER.debug("Finding StateProvince by unique keys: {}", stateProvinceCodeAndCountryRegionCodeMap);
        return this.wmGenericDao.findByUniqueKey(stateProvinceCodeAndCountryRegionCodeMap);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince getByName(String name) {
        Map<String, Object> nameMap = new HashMap<>();
        nameMap.put("name", name);

        LOGGER.debug("Finding StateProvince by unique keys: {}", nameMap);
        return this.wmGenericDao.findByUniqueKey(nameMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince update(StateProvince stateProvince) {
        LOGGER.debug("Updating StateProvince with information: {}", stateProvince);

        List<Address> addresses = stateProvince.getAddresses();
        if(addresses != null && Hibernate.isInitialized(addresses)) {
            addresses.forEach(_address -> _address.setStateProvince(stateProvince));
        }

        this.wmGenericDao.update(stateProvince);
        this.wmGenericDao.refresh(stateProvince);

        return stateProvince;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public StateProvince delete(Integer stateprovinceId) {
        LOGGER.debug("Deleting StateProvince with id: {}", stateprovinceId);
        StateProvince deleted = this.wmGenericDao.findById(stateprovinceId);
        if (deleted == null) {
            LOGGER.debug("No StateProvince found with id: {}", stateprovinceId);
            throw new EntityNotFoundException(String.valueOf(stateprovinceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(StateProvince stateProvince) {
        LOGGER.debug("Deleting StateProvince with {}", stateProvince);
        this.wmGenericDao.delete(stateProvince);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<StateProvince> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all StateProvinces");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<StateProvince> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all StateProvinces");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table StateProvince to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table StateProvince to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Address> findAssociatedAddresses(Integer stateProvinceId, Pageable pageable) {
        LOGGER.debug("Fetching all associated addresses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("stateProvince.stateProvinceId = '" + stateProvinceId + "'");

        return addressService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AddressService instance
     */
    protected void setAddressService(AddressService service) {
        this.addressService = service;
    }

}