/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.adventureworks2014.AddressType;


/**
 * ServiceImpl object for domain model class AddressType.
 *
 * @see AddressType
 */
@Service("AdventureWorks2014.AddressTypeService")
@Validated
public class AddressTypeServiceImpl implements AddressTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AddressTypeServiceImpl.class);


    @Autowired
    @Qualifier("AdventureWorks2014.AddressTypeDao")
    private WMGenericDao<AddressType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AddressType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public AddressType create(AddressType addressType) {
        LOGGER.debug("Creating a new AddressType with information: {}", addressType);

        AddressType addressTypeCreated = this.wmGenericDao.create(addressType);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(addressTypeCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public AddressType getById(Integer addresstypeId) {
        LOGGER.debug("Finding AddressType by id: {}", addresstypeId);
        return this.wmGenericDao.findById(addresstypeId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public AddressType findById(Integer addresstypeId) {
        LOGGER.debug("Finding AddressType by id: {}", addresstypeId);
        try {
            return this.wmGenericDao.findById(addresstypeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AddressType found with id: {}", addresstypeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<AddressType> findByMultipleIds(List<Integer> addresstypeIds, boolean orderedReturn) {
        LOGGER.debug("Finding AddressTypes by ids: {}", addresstypeIds);

        return this.wmGenericDao.findByMultipleIds(addresstypeIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public AddressType getByRowguid(String rowguid) {
        Map<String, Object> rowguidMap = new HashMap<>();
        rowguidMap.put("rowguid", rowguid);

        LOGGER.debug("Finding AddressType by unique keys: {}", rowguidMap);
        return this.wmGenericDao.findByUniqueKey(rowguidMap);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public AddressType getByName(String name) {
        Map<String, Object> nameMap = new HashMap<>();
        nameMap.put("name", name);

        LOGGER.debug("Finding AddressType by unique keys: {}", nameMap);
        return this.wmGenericDao.findByUniqueKey(nameMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public AddressType update(AddressType addressType) {
        LOGGER.debug("Updating AddressType with information: {}", addressType);

        this.wmGenericDao.update(addressType);
        this.wmGenericDao.refresh(addressType);

        return addressType;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public AddressType delete(Integer addresstypeId) {
        LOGGER.debug("Deleting AddressType with id: {}", addresstypeId);
        AddressType deleted = this.wmGenericDao.findById(addresstypeId);
        if (deleted == null) {
            LOGGER.debug("No AddressType found with id: {}", addresstypeId);
            throw new EntityNotFoundException(String.valueOf(addresstypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(AddressType addressType) {
        LOGGER.debug("Deleting AddressType with {}", addressType);
        this.wmGenericDao.delete(addressType);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<AddressType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AddressTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<AddressType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AddressTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table AddressType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table AddressType to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}