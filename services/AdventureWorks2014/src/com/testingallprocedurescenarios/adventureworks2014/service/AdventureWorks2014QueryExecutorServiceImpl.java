/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.testingallprocedurescenarios.adventureworks2014.models.query.*;

@Service
public class AdventureWorks2014QueryExecutorServiceImpl implements AdventureWorks2014QueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdventureWorks2014QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("AdventureWorks2014WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "AdventureWorks2014TransactionManager", readOnly = true)
    @Override
    public Page<SvGetPersonByPersonTypeResponse> executeSV_GetPersonByPersonType(String personType, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("PersonType", personType);

        return queryExecutor.executeNamedQuery("SV_GetPersonByPersonType", params, SvGetPersonByPersonTypeResponse.class, pageable);
    }

    @Transactional(value = "AdventureWorks2014TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_GetPersonByPersonType(String personType, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("PersonType", personType);

        QueryProcedureInput queryInput = new QueryProcedureInput("SV_GetPersonByPersonType", params, SvGetPersonByPersonTypeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "AdventureWorks2014TransactionManager", readOnly = true)
    @Override
    public SvPersonSingleRecordResponse executeSV_PersonSingleRecord() {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SV_PersonSingleRecord", params, SvPersonSingleRecordResponse.class);
    }

}