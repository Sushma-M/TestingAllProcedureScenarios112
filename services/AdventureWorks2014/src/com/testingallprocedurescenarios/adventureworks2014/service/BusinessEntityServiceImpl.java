/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.adventureworks2014.BusinessEntity;
import com.testingallprocedurescenarios.adventureworks2014.Person;


/**
 * ServiceImpl object for domain model class BusinessEntity.
 *
 * @see BusinessEntity
 */
@Service("AdventureWorks2014.BusinessEntityService")
@Validated
public class BusinessEntityServiceImpl implements BusinessEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessEntityServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("AdventureWorks2014.PersonService")
    private PersonService personService;

    @Autowired
    @Qualifier("AdventureWorks2014.BusinessEntityDao")
    private WMGenericDao<BusinessEntity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BusinessEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public BusinessEntity create(BusinessEntity businessEntity) {
        LOGGER.debug("Creating a new BusinessEntity with information: {}", businessEntity);

        BusinessEntity businessEntityCreated = this.wmGenericDao.create(businessEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(businessEntityCreated);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public BusinessEntity getById(Integer businessentityId) {
        LOGGER.debug("Finding BusinessEntity by id: {}", businessentityId);
        return this.wmGenericDao.findById(businessentityId);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public BusinessEntity findById(Integer businessentityId) {
        LOGGER.debug("Finding BusinessEntity by id: {}", businessentityId);
        try {
            return this.wmGenericDao.findById(businessentityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BusinessEntity found with id: {}", businessentityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public List<BusinessEntity> findByMultipleIds(List<Integer> businessentityIds, boolean orderedReturn) {
        LOGGER.debug("Finding BusinessEntities by ids: {}", businessentityIds);

        return this.wmGenericDao.findByMultipleIds(businessentityIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public BusinessEntity getByRowguid(String rowguid) {
        Map<String, Object> rowguidMap = new HashMap<>();
        rowguidMap.put("rowguid", rowguid);

        LOGGER.debug("Finding BusinessEntity by unique keys: {}", rowguidMap);
        return this.wmGenericDao.findByUniqueKey(rowguidMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public BusinessEntity update(BusinessEntity businessEntity) {
        LOGGER.debug("Updating BusinessEntity with information: {}", businessEntity);

        Person personForBusinessEntityId = businessEntity.getPersonForBusinessEntityId();
        List<Person> personsForPerson1BusinessEntityId = businessEntity.getPersonsForPerson1BusinessEntityId();
        if(personForBusinessEntityId != null && Hibernate.isInitialized(personForBusinessEntityId)) {
            personForBusinessEntityId.setBusinessEntityByBusinessEntityId(businessEntity);
        }
        if(personsForPerson1BusinessEntityId != null && Hibernate.isInitialized(personsForPerson1BusinessEntityId)) {
            personsForPerson1BusinessEntityId.forEach(_person -> _person.setBusinessEntityByPerson1BusinessEntityId(businessEntity));
        }

        this.wmGenericDao.update(businessEntity);
        this.wmGenericDao.refresh(businessEntity);

        return businessEntity;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public BusinessEntity delete(Integer businessentityId) {
        LOGGER.debug("Deleting BusinessEntity with id: {}", businessentityId);
        BusinessEntity deleted = this.wmGenericDao.findById(businessentityId);
        if (deleted == null) {
            LOGGER.debug("No BusinessEntity found with id: {}", businessentityId);
            throw new EntityNotFoundException(String.valueOf(businessentityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public void delete(BusinessEntity businessEntity) {
        LOGGER.debug("Deleting BusinessEntity with {}", businessEntity);
        this.wmGenericDao.delete(businessEntity);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<BusinessEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BusinessEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<BusinessEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BusinessEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table BusinessEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AdventureWorks2014 for table BusinessEntity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Person> findAssociatedPersonsForPerson1BusinessEntityId(Integer businessEntityId, Pageable pageable) {
        LOGGER.debug("Fetching all associated personsForPerson1BusinessEntityId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("businessEntityByPerson1BusinessEntityId.businessEntityId = '" + businessEntityId + "'");

        return personService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PersonService instance
     */
    protected void setPersonService(PersonService service) {
        this.personService = service;
    }

}