/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * Act generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ACT`", uniqueConstraints = {
            @UniqueConstraint(name = "`XACT2`", columnNames = {"`ACTNO`", "`ACTKWD`"})})
public class Act implements Serializable {

    private Short actno;
    private String actkwd;
    private String actdesc;
    private Act actByActno;
    private Act actForActno;

    @Id
    @Column(name = "`ACTNO`", nullable = false, scale = 0, precision = 5)
    public Short getActno() {
        return this.actno;
    }

    public void setActno(Short actno) {
        this.actno = actno;
    }

    @Column(name = "`ACTKWD`", nullable = false, length = 6)
    public String getActkwd() {
        return this.actkwd;
    }

    public void setActkwd(String actkwd) {
        this.actkwd = actkwd;
    }

    @Column(name = "`ACTDESC`", nullable = false, length = 20)
    public String getActdesc() {
        return this.actdesc;
    }

    public void setActdesc(String actdesc) {
        this.actdesc = actdesc;
    }

    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"actByActno", "actForActno"})
    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ACTNO`", referencedColumnName = "`ACTNO`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`RPAA`"))
    @Fetch(FetchMode.JOIN)
    public Act getActByActno() {
        return this.actByActno;
    }

    public void setActByActno(Act actByActno) {
        if(actByActno != null) {
            this.actno = actByActno.getActno();
        }

        this.actByActno = actByActno;
    }
    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"actByActno", "actForActno"})
    @OneToOne(fetch = FetchType.LAZY, mappedBy = "actByActno")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public Act getActForActno() {
        return this.actForActno;
    }

    public void setActForActno(Act actForActno) {
        this.actForActno = actForActno;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Act)) return false;
        final Act act = (Act) o;
        return Objects.equals(getActno(), act.getActno());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getActno());
    }
}