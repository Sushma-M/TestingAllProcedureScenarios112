/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Department;
import com.testingallprocedurescenarios.sample2.Employee;
import com.testingallprocedurescenarios.sample2.Project;


/**
 * ServiceImpl object for domain model class Department.
 *
 * @see Department
 */
@Service("SAMPLE2.DepartmentService")
@Validated
public class DepartmentServiceImpl implements DepartmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.ProjectService")
    private ProjectService projectService;

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.EmployeeService")
    private EmployeeService employeeService;

    @Autowired
    @Qualifier("SAMPLE2.DepartmentDao")
    private WMGenericDao<Department, String> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Department, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Department create(Department department) {
        LOGGER.debug("Creating a new Department with information: {}", department);

        List<Department> departmentsForAdmrdept = department.getDepartmentsForAdmrdept();
        List<Employee> employeesForWorkdept = department.getEmployeesForWorkdept();
        List<Project> projects = department.getProjects();
        if(departmentsForAdmrdept != null && Hibernate.isInitialized(departmentsForAdmrdept)) {
            departmentsForAdmrdept.forEach(_department -> _department.setDepartmentByAdmrdept(department));
        }
        if(employeesForWorkdept != null && Hibernate.isInitialized(employeesForWorkdept)) {
            employeesForWorkdept.forEach(_employee -> _employee.setDepartmentByWorkdept(department));
        }
        if(projects != null && Hibernate.isInitialized(projects)) {
            projects.forEach(_project -> _project.setDepartment(department));
        }

        Department departmentCreated = this.wmGenericDao.create(department);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(departmentCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Department getById(String departmentId) {
        LOGGER.debug("Finding Department by id: {}", departmentId);
        return this.wmGenericDao.findById(departmentId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Department findById(String departmentId) {
        LOGGER.debug("Finding Department by id: {}", departmentId);
        try {
            return this.wmGenericDao.findById(departmentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Department found with id: {}", departmentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Department> findByMultipleIds(List<String> departmentIds, boolean orderedReturn) {
        LOGGER.debug("Finding Departments by ids: {}", departmentIds);

        return this.wmGenericDao.findByMultipleIds(departmentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Department update(Department department) {
        LOGGER.debug("Updating Department with information: {}", department);

        List<Department> departmentsForAdmrdept = department.getDepartmentsForAdmrdept();
        List<Employee> employeesForWorkdept = department.getEmployeesForWorkdept();
        List<Project> projects = department.getProjects();
        if(departmentsForAdmrdept != null && Hibernate.isInitialized(departmentsForAdmrdept)) {
            departmentsForAdmrdept.forEach(_department -> _department.setDepartmentByAdmrdept(department));
        }
        if(employeesForWorkdept != null && Hibernate.isInitialized(employeesForWorkdept)) {
            employeesForWorkdept.forEach(_employee -> _employee.setDepartmentByWorkdept(department));
        }
        if(projects != null && Hibernate.isInitialized(projects)) {
            projects.forEach(_project -> _project.setDepartment(department));
        }

        this.wmGenericDao.update(department);
        this.wmGenericDao.refresh(department);

        return department;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Department partialUpdate(String departmentId, Map<String, Object>departmentPatch) {
        LOGGER.debug("Partially Updating the Department with id: {}", departmentId);

        Department department = getById(departmentId);

        try {
            ObjectReader departmentReader = this.objectMapper.readerForUpdating(department);
            department = departmentReader.readValue(this.objectMapper.writeValueAsString(departmentPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", departmentPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        department = update(department);

        return department;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Department delete(String departmentId) {
        LOGGER.debug("Deleting Department with id: {}", departmentId);
        Department deleted = this.wmGenericDao.findById(departmentId);
        if (deleted == null) {
            LOGGER.debug("No Department found with id: {}", departmentId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Department.class.getSimpleName(), departmentId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Department department) {
        LOGGER.debug("Deleting Department with {}", department);
        this.wmGenericDao.delete(department);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Department> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Department> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Departments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Department to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Department to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Department> findAssociatedDepartmentsForAdmrdept(String deptno, Pageable pageable) {
        LOGGER.debug("Fetching all associated departmentsForAdmrdept");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("departmentByAdmrdept.deptno = '" + deptno + "'");

        return findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Employee> findAssociatedEmployeesForWorkdept(String deptno, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeesForWorkdept");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("departmentByWorkdept.deptno = '" + deptno + "'");

        return employeeService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Project> findAssociatedProjects(String deptno, Pageable pageable) {
        LOGGER.debug("Fetching all associated projects");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("department.deptno = '" + deptno + "'");

        return projectService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProjectService instance
     */
    protected void setProjectService(ProjectService service) {
        this.projectService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EmployeeService instance
     */
    protected void setEmployeeService(EmployeeService service) {
        this.employeeService = service;
    }

}