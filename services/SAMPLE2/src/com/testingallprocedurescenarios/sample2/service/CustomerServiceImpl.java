/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Customer;
import com.testingallprocedurescenarios.sample2.Purchaseorder;


/**
 * ServiceImpl object for domain model class Customer.
 *
 * @see Customer
 */
@Service("SAMPLE2.CustomerService")
@Validated
public class CustomerServiceImpl implements CustomerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.PurchaseorderService")
    private PurchaseorderService purchaseorderService;

    @Autowired
    @Qualifier("SAMPLE2.CustomerDao")
    private WMGenericDao<Customer, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Customer, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Customer create(Customer customer) {
        LOGGER.debug("Creating a new Customer with information: {}", customer);

        List<Purchaseorder> purchaseorders = customer.getPurchaseorders();
        if(purchaseorders != null && Hibernate.isInitialized(purchaseorders)) {
            purchaseorders.forEach(_purchaseorder -> _purchaseorder.setCustomer(customer));
        }

        Customer customerCreated = this.wmGenericDao.create(customer);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(customerCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Customer getById(BigInteger customerId) {
        LOGGER.debug("Finding Customer by id: {}", customerId);
        return this.wmGenericDao.findById(customerId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Customer findById(BigInteger customerId) {
        LOGGER.debug("Finding Customer by id: {}", customerId);
        try {
            return this.wmGenericDao.findById(customerId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Customer found with id: {}", customerId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Customer> findByMultipleIds(List<BigInteger> customerIds, boolean orderedReturn) {
        LOGGER.debug("Finding Customers by ids: {}", customerIds);

        return this.wmGenericDao.findByMultipleIds(customerIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Customer getByInfo(byte[] info) {
        Map<String, Object> infoMap = new HashMap<>();
        infoMap.put("info", info);

        LOGGER.debug("Finding Customer by unique keys: {}", infoMap);
        return this.wmGenericDao.findByUniqueKey(infoMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Customer update(Customer customer) {
        LOGGER.debug("Updating Customer with information: {}", customer);

        List<Purchaseorder> purchaseorders = customer.getPurchaseorders();
        if(purchaseorders != null && Hibernate.isInitialized(purchaseorders)) {
            purchaseorders.forEach(_purchaseorder -> _purchaseorder.setCustomer(customer));
        }

        this.wmGenericDao.update(customer);
        this.wmGenericDao.refresh(customer);

        return customer;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Customer delete(BigInteger customerId) {
        LOGGER.debug("Deleting Customer with id: {}", customerId);
        Customer deleted = this.wmGenericDao.findById(customerId);
        if (deleted == null) {
            LOGGER.debug("No Customer found with id: {}", customerId);
            throw new EntityNotFoundException(String.valueOf(customerId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Customer customer) {
        LOGGER.debug("Deleting Customer with {}", customer);
        this.wmGenericDao.delete(customer);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Customer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Customer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Customer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Customer to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Purchaseorder> findAssociatedPurchaseorders(BigInteger cid, Pageable pageable) {
        LOGGER.debug("Fetching all associated purchaseorders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("customer.cid = '" + cid + "'");

        return purchaseorderService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PurchaseorderService instance
     */
    protected void setPurchaseorderService(PurchaseorderService service) {
        this.purchaseorderService = service;
    }

}