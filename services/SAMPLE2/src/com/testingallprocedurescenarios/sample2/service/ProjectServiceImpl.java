/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Projact;
import com.testingallprocedurescenarios.sample2.Project;


/**
 * ServiceImpl object for domain model class Project.
 *
 * @see Project
 */
@Service("SAMPLE2.ProjectService")
@Validated
public class ProjectServiceImpl implements ProjectService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.ProjactService")
    private ProjactService projactService;

    @Autowired
    @Qualifier("SAMPLE2.ProjectDao")
    private WMGenericDao<Project, String> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Project, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Project create(Project project) {
        LOGGER.debug("Creating a new Project with information: {}", project);

        List<Projact> projacts = project.getProjacts();
        List<Project> projectsForMajproj = project.getProjectsForMajproj();
        if(projacts != null && Hibernate.isInitialized(projacts)) {
            projacts.forEach(_projact -> _projact.setProject(project));
        }
        if(projectsForMajproj != null && Hibernate.isInitialized(projectsForMajproj)) {
            projectsForMajproj.forEach(_project -> _project.setProjectByMajproj(project));
        }

        Project projectCreated = this.wmGenericDao.create(project);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(projectCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Project getById(String projectId) {
        LOGGER.debug("Finding Project by id: {}", projectId);
        return this.wmGenericDao.findById(projectId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Project findById(String projectId) {
        LOGGER.debug("Finding Project by id: {}", projectId);
        try {
            return this.wmGenericDao.findById(projectId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Project found with id: {}", projectId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Project> findByMultipleIds(List<String> projectIds, boolean orderedReturn) {
        LOGGER.debug("Finding Projects by ids: {}", projectIds);

        return this.wmGenericDao.findByMultipleIds(projectIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Project update(Project project) {
        LOGGER.debug("Updating Project with information: {}", project);

        List<Projact> projacts = project.getProjacts();
        List<Project> projectsForMajproj = project.getProjectsForMajproj();
        if(projacts != null && Hibernate.isInitialized(projacts)) {
            projacts.forEach(_projact -> _projact.setProject(project));
        }
        if(projectsForMajproj != null && Hibernate.isInitialized(projectsForMajproj)) {
            projectsForMajproj.forEach(_project -> _project.setProjectByMajproj(project));
        }

        this.wmGenericDao.update(project);
        this.wmGenericDao.refresh(project);

        return project;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Project partialUpdate(String projectId, Map<String, Object>projectPatch) {
        LOGGER.debug("Partially Updating the Project with id: {}", projectId);

        Project project = getById(projectId);

        try {
            ObjectReader projectReader = this.objectMapper.readerForUpdating(project);
            project = projectReader.readValue(this.objectMapper.writeValueAsString(projectPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", projectPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        project = update(project);

        return project;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Project delete(String projectId) {
        LOGGER.debug("Deleting Project with id: {}", projectId);
        Project deleted = this.wmGenericDao.findById(projectId);
        if (deleted == null) {
            LOGGER.debug("No Project found with id: {}", projectId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Project.class.getSimpleName(), projectId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Project project) {
        LOGGER.debug("Deleting Project with {}", project);
        this.wmGenericDao.delete(project);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Project> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Projects");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Project> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Projects");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Project to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Project to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Projact> findAssociatedProjacts(String projno, Pageable pageable) {
        LOGGER.debug("Fetching all associated projacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("project.projno = '" + projno + "'");

        return projactService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Project> findAssociatedProjectsForMajproj(String projno, Pageable pageable) {
        LOGGER.debug("Fetching all associated projectsForMajproj");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("projectByMajproj.projno = '" + projno + "'");

        return findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProjactService instance
     */
    protected void setProjactService(ProjactService service) {
        this.projactService = service;
    }

}