/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Vstafac1;
import com.testingallprocedurescenarios.sample2.Vstafac1Id;

/**
 * Service object for domain model class {@link Vstafac1}.
 */
public interface Vstafac1Service {

    /**
     * Creates a new Vstafac1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vstafac1 if any.
     *
     * @param vstafac1 Details of the Vstafac1 to be created; value cannot be null.
     * @return The newly created Vstafac1.
     */
    Vstafac1 create(@Valid Vstafac1 vstafac1);


	/**
     * Returns Vstafac1 by given id if exists.
     *
     * @param vstafac1Id The id of the Vstafac1 to get; value cannot be null.
     * @return Vstafac1 associated with the given vstafac1Id.
	 * @throws EntityNotFoundException If no Vstafac1 is found.
     */
    Vstafac1 getById(Vstafac1Id vstafac1Id);

    /**
     * Find and return the Vstafac1 by given id if exists, returns null otherwise.
     *
     * @param vstafac1Id The id of the Vstafac1 to get; value cannot be null.
     * @return Vstafac1 associated with the given vstafac1Id.
     */
    Vstafac1 findById(Vstafac1Id vstafac1Id);

	/**
     * Find and return the list of Vstafac1s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vstafac1Ids The id's of the Vstafac1 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Vstafac1s associated with the given vstafac1Ids.
     */
    List<Vstafac1> findByMultipleIds(List<Vstafac1Id> vstafac1Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Vstafac1. It replaces all fields of the existing Vstafac1 with the given vstafac1.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vstafac1 if any.
     *
     * @param vstafac1 The details of the Vstafac1 to be updated; value cannot be null.
     * @return The updated Vstafac1.
     * @throws EntityNotFoundException if no Vstafac1 is found with given input.
     */
    Vstafac1 update(@Valid Vstafac1 vstafac1);

    /**
     * Deletes an existing Vstafac1 with the given id.
     *
     * @param vstafac1Id The id of the Vstafac1 to be deleted; value cannot be null.
     * @return The deleted Vstafac1.
     * @throws EntityNotFoundException if no Vstafac1 found with the given id.
     */
    Vstafac1 delete(Vstafac1Id vstafac1Id);

    /**
     * Deletes an existing Vstafac1 with the given object.
     *
     * @param vstafac1 The instance of the Vstafac1 to be deleted; value cannot be null.
     */
    void delete(Vstafac1 vstafac1);

    /**
     * Find all Vstafac1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vstafac1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Vstafac1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Vstafac1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vstafac1s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Vstafac1> findAll(String query, Pageable pageable);

    /**
     * Exports all Vstafac1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Vstafac1s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Vstafac1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Vstafac1.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}