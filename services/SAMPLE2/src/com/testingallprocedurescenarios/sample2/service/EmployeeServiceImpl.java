/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Department;
import com.testingallprocedurescenarios.sample2.EmpPhoto;
import com.testingallprocedurescenarios.sample2.EmpResume;
import com.testingallprocedurescenarios.sample2.Employee;
import com.testingallprocedurescenarios.sample2.Project;


/**
 * ServiceImpl object for domain model class Employee.
 *
 * @see Employee
 */
@Service("SAMPLE2.EmployeeService")
@Validated
public class EmployeeServiceImpl implements EmployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.ProjectService")
    private ProjectService projectService;

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.DepartmentService")
    private DepartmentService departmentService;

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.EmpResumeService")
    private EmpResumeService empResumeService;

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.EmpPhotoService")
    private EmpPhotoService empPhotoService;

    @Autowired
    @Qualifier("SAMPLE2.EmployeeDao")
    private WMGenericDao<Employee, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Employee, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Employee create(Employee employee) {
        LOGGER.debug("Creating a new Employee with information: {}", employee);

        List<EmpPhoto> empPhotos = employee.getEmpPhotos();
        List<EmpResume> empResumes = employee.getEmpResumes();
        List<Department> departmentsForMgrno = employee.getDepartmentsForMgrno();
        List<Project> projects = employee.getProjects();
        if(empPhotos != null && Hibernate.isInitialized(empPhotos)) {
            empPhotos.forEach(_empPhoto -> _empPhoto.setEmployee(employee));
        }
        if(empResumes != null && Hibernate.isInitialized(empResumes)) {
            empResumes.forEach(_empResume -> _empResume.setEmployee(employee));
        }
        if(departmentsForMgrno != null && Hibernate.isInitialized(departmentsForMgrno)) {
            departmentsForMgrno.forEach(_department -> _department.setEmployeeByMgrno(employee));
        }
        if(projects != null && Hibernate.isInitialized(projects)) {
            projects.forEach(_project -> _project.setEmployee(employee));
        }

        Employee employeeCreated = this.wmGenericDao.create(employee);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(employeeCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Employee getById(String employeeId) {
        LOGGER.debug("Finding Employee by id: {}", employeeId);
        return this.wmGenericDao.findById(employeeId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Employee findById(String employeeId) {
        LOGGER.debug("Finding Employee by id: {}", employeeId);
        try {
            return this.wmGenericDao.findById(employeeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Employee found with id: {}", employeeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Employee> findByMultipleIds(List<String> employeeIds, boolean orderedReturn) {
        LOGGER.debug("Finding Employees by ids: {}", employeeIds);

        return this.wmGenericDao.findByMultipleIds(employeeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Employee update(Employee employee) {
        LOGGER.debug("Updating Employee with information: {}", employee);

        List<EmpPhoto> empPhotos = employee.getEmpPhotos();
        List<EmpResume> empResumes = employee.getEmpResumes();
        List<Department> departmentsForMgrno = employee.getDepartmentsForMgrno();
        List<Project> projects = employee.getProjects();
        if(empPhotos != null && Hibernate.isInitialized(empPhotos)) {
            empPhotos.forEach(_empPhoto -> _empPhoto.setEmployee(employee));
        }
        if(empResumes != null && Hibernate.isInitialized(empResumes)) {
            empResumes.forEach(_empResume -> _empResume.setEmployee(employee));
        }
        if(departmentsForMgrno != null && Hibernate.isInitialized(departmentsForMgrno)) {
            departmentsForMgrno.forEach(_department -> _department.setEmployeeByMgrno(employee));
        }
        if(projects != null && Hibernate.isInitialized(projects)) {
            projects.forEach(_project -> _project.setEmployee(employee));
        }

        this.wmGenericDao.update(employee);
        this.wmGenericDao.refresh(employee);

        return employee;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Employee delete(String employeeId) {
        LOGGER.debug("Deleting Employee with id: {}", employeeId);
        Employee deleted = this.wmGenericDao.findById(employeeId);
        if (deleted == null) {
            LOGGER.debug("No Employee found with id: {}", employeeId);
            throw new EntityNotFoundException(String.valueOf(employeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Employee employee) {
        LOGGER.debug("Deleting Employee with {}", employee);
        this.wmGenericDao.delete(employee);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Employee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Employees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Employee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Employees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Employee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Employee to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<EmpPhoto> findAssociatedEmpPhotos(String empno, Pageable pageable) {
        LOGGER.debug("Fetching all associated empPhotos");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employee.empno = '" + empno + "'");

        return empPhotoService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<EmpResume> findAssociatedEmpResumes(String empno, Pageable pageable) {
        LOGGER.debug("Fetching all associated empResumes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employee.empno = '" + empno + "'");

        return empResumeService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Department> findAssociatedDepartmentsForMgrno(String empno, Pageable pageable) {
        LOGGER.debug("Fetching all associated departmentsForMgrno");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employeeByMgrno.empno = '" + empno + "'");

        return departmentService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Project> findAssociatedProjects(String empno, Pageable pageable) {
        LOGGER.debug("Fetching all associated projects");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employee.empno = '" + empno + "'");

        return projectService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProjectService instance
     */
    protected void setProjectService(ProjectService service) {
        this.projectService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DepartmentService instance
     */
    protected void setDepartmentService(DepartmentService service) {
        this.departmentService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EmpResumeService instance
     */
    protected void setEmpResumeService(EmpResumeService service) {
        this.empResumeService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EmpPhotoService instance
     */
    protected void setEmpPhotoService(EmpPhotoService service) {
        this.empPhotoService = service;
    }

}