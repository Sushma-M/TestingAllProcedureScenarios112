/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Empprojact;
import com.testingallprocedurescenarios.sample2.Projact;
import com.testingallprocedurescenarios.sample2.ProjactId;


/**
 * ServiceImpl object for domain model class Projact.
 *
 * @see Projact
 */
@Service("SAMPLE2.ProjactService")
@Validated
public class ProjactServiceImpl implements ProjactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjactServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("SAMPLE2.EmpprojactService")
    private EmpprojactService empprojactService;

    @Autowired
    @Qualifier("SAMPLE2.ProjactDao")
    private WMGenericDao<Projact, ProjactId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Projact, ProjactId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Projact create(Projact projact) {
        LOGGER.debug("Creating a new Projact with information: {}", projact);

        List<Empprojact> empprojacts = projact.getEmpprojacts();
        if(empprojacts != null && Hibernate.isInitialized(empprojacts)) {
            empprojacts.forEach(_empprojact -> _empprojact.setProjact(projact));
        }

        Projact projactCreated = this.wmGenericDao.create(projact);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(projactCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Projact getById(ProjactId projactId) {
        LOGGER.debug("Finding Projact by id: {}", projactId);
        return this.wmGenericDao.findById(projactId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Projact findById(ProjactId projactId) {
        LOGGER.debug("Finding Projact by id: {}", projactId);
        try {
            return this.wmGenericDao.findById(projactId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Projact found with id: {}", projactId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Projact> findByMultipleIds(List<ProjactId> projactIds, boolean orderedReturn) {
        LOGGER.debug("Finding Projacts by ids: {}", projactIds);

        return this.wmGenericDao.findByMultipleIds(projactIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Projact update(Projact projact) {
        LOGGER.debug("Updating Projact with information: {}", projact);

        List<Empprojact> empprojacts = projact.getEmpprojacts();
        if(empprojacts != null && Hibernate.isInitialized(empprojacts)) {
            empprojacts.forEach(_empprojact -> _empprojact.setProjact(projact));
        }

        this.wmGenericDao.update(projact);
        this.wmGenericDao.refresh(projact);

        return projact;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Projact delete(ProjactId projactId) {
        LOGGER.debug("Deleting Projact with id: {}", projactId);
        Projact deleted = this.wmGenericDao.findById(projactId);
        if (deleted == null) {
            LOGGER.debug("No Projact found with id: {}", projactId);
            throw new EntityNotFoundException(String.valueOf(projactId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Projact projact) {
        LOGGER.debug("Deleting Projact with {}", projact);
        this.wmGenericDao.delete(projact);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Projact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Projacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Projact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Projacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Projact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Projact to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Empprojact> findAssociatedEmpprojacts(Short actno, String projno, Date acstdate, Pageable pageable) {
        LOGGER.debug("Fetching all associated empprojacts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("projact.actno = '" + actno + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("projact.projno = '" + projno + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("projact.acstdate = '" + acstdate + "'");

        return empprojactService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service EmpprojactService instance
     */
    protected void setEmpprojactService(EmpprojactService service) {
        this.empprojactService = service;
    }

}