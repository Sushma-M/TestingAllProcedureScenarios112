/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.testingallprocedurescenarios.sample2.models.query.*;

@Service
public class SAMPLE2QueryExecutorServiceImpl implements SAMPLE2QueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SAMPLE2QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("SAMPLE2WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "SAMPLE2TransactionManager", readOnly = true)
    @Override
    public Page<SvGetAllTypesResponse> executeSV_GetAllTypes(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SV_GetAllTypes", params, SvGetAllTypesResponse.class, pageable);
    }

    @Transactional(value = "SAMPLE2TransactionManager", readOnly = true)
    @Override
    public InputStream getBlobcolContentForSV_GetAllTypes() throws EntityNotFoundException {
        Map<String, Object> params = new HashMap<>(0);


        SvGetAllTypesResponse _result =  queryExecutor.executeNamedQuery("SV_GetAllTypes", params, SvGetAllTypesResponse.class);
        if(_result.getBlobcol() == null) {
            LOGGER.debug("Blob content not exists for blobcol in query SV_GetAllTypes");
            throw new BlobContentNotFoundException("Blob content not found for blobcol in query SV_GetAllTypes");
        }
        return new ByteArrayInputStream(_result.getBlobcol());
    }

    @Transactional(value = "SAMPLE2TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_GetAllTypes(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("SV_GetAllTypes", params, SvGetAllTypesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}