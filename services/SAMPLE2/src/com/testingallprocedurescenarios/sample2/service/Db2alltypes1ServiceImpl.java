/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Db2alltypes1;


/**
 * ServiceImpl object for domain model class Db2alltypes1.
 *
 * @see Db2alltypes1
 */
@Service("SAMPLE2.Db2alltypes1Service")
@Validated
public class Db2alltypes1ServiceImpl implements Db2alltypes1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Db2alltypes1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.Db2alltypes1Dao")
    private WMGenericDao<Db2alltypes1, Integer> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Db2alltypes1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Db2alltypes1 create(Db2alltypes1 db2alltypes1) {
        LOGGER.debug("Creating a new Db2alltypes1 with information: {}", db2alltypes1);

        Db2alltypes1 db2alltypes1Created = this.wmGenericDao.create(db2alltypes1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(db2alltypes1Created);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Db2alltypes1 getById(Integer db2alltypes1Id) {
        LOGGER.debug("Finding Db2alltypes1 by id: {}", db2alltypes1Id);
        return this.wmGenericDao.findById(db2alltypes1Id);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Db2alltypes1 findById(Integer db2alltypes1Id) {
        LOGGER.debug("Finding Db2alltypes1 by id: {}", db2alltypes1Id);
        try {
            return this.wmGenericDao.findById(db2alltypes1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Db2alltypes1 found with id: {}", db2alltypes1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Db2alltypes1> findByMultipleIds(List<Integer> db2alltypes1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Db2alltypes1s by ids: {}", db2alltypes1Ids);

        return this.wmGenericDao.findByMultipleIds(db2alltypes1Ids, orderedReturn);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Db2alltypes1 getBySmallintcol(short smallintcol) {
        Map<String, Object> smallintcolMap = new HashMap<>();
        smallintcolMap.put("smallintcol", smallintcol);

        LOGGER.debug("Finding Db2alltypes1 by unique keys: {}", smallintcolMap);
        return this.wmGenericDao.findByUniqueKey(smallintcolMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Db2alltypes1 update(Db2alltypes1 db2alltypes1) {
        LOGGER.debug("Updating Db2alltypes1 with information: {}", db2alltypes1);

        this.wmGenericDao.update(db2alltypes1);
        this.wmGenericDao.refresh(db2alltypes1);

        return db2alltypes1;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Db2alltypes1 partialUpdate(Integer db2alltypes1Id, Map<String, Object>db2alltypes1Patch) {
        LOGGER.debug("Partially Updating the Db2alltypes1 with id: {}", db2alltypes1Id);

        Db2alltypes1 db2alltypes1 = getById(db2alltypes1Id);

        try {
            ObjectReader db2alltypes1Reader = this.objectMapper.readerForUpdating(db2alltypes1);
            db2alltypes1 = db2alltypes1Reader.readValue(this.objectMapper.writeValueAsString(db2alltypes1Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", db2alltypes1Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        db2alltypes1 = update(db2alltypes1);

        return db2alltypes1;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Db2alltypes1 delete(Integer db2alltypes1Id) {
        LOGGER.debug("Deleting Db2alltypes1 with id: {}", db2alltypes1Id);
        Db2alltypes1 deleted = this.wmGenericDao.findById(db2alltypes1Id);
        if (deleted == null) {
            LOGGER.debug("No Db2alltypes1 found with id: {}", db2alltypes1Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Db2alltypes1.class.getSimpleName(), db2alltypes1Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Db2alltypes1 db2alltypes1) {
        LOGGER.debug("Deleting Db2alltypes1 with {}", db2alltypes1);
        this.wmGenericDao.delete(db2alltypes1);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Db2alltypes1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Db2alltypes1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Db2alltypes1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Db2alltypes1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Db2alltypes1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Db2alltypes1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}