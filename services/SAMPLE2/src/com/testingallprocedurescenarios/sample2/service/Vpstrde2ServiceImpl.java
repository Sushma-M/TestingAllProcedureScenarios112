/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Vpstrde2;
import com.testingallprocedurescenarios.sample2.Vpstrde2Id;


/**
 * ServiceImpl object for domain model class Vpstrde2.
 *
 * @see Vpstrde2
 */
@Service("SAMPLE2.Vpstrde2Service")
@Validated
public class Vpstrde2ServiceImpl implements Vpstrde2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vpstrde2ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.Vpstrde2Dao")
    private WMGenericDao<Vpstrde2, Vpstrde2Id> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Vpstrde2, Vpstrde2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vpstrde2 create(Vpstrde2 vpstrde2) {
        LOGGER.debug("Creating a new Vpstrde2 with information: {}", vpstrde2);

        Vpstrde2 vpstrde2Created = this.wmGenericDao.create(vpstrde2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vpstrde2Created);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vpstrde2 getById(Vpstrde2Id vpstrde2Id) {
        LOGGER.debug("Finding Vpstrde2 by id: {}", vpstrde2Id);
        return this.wmGenericDao.findById(vpstrde2Id);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vpstrde2 findById(Vpstrde2Id vpstrde2Id) {
        LOGGER.debug("Finding Vpstrde2 by id: {}", vpstrde2Id);
        try {
            return this.wmGenericDao.findById(vpstrde2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Vpstrde2 found with id: {}", vpstrde2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Vpstrde2> findByMultipleIds(List<Vpstrde2Id> vpstrde2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Vpstrde2s by ids: {}", vpstrde2Ids);

        return this.wmGenericDao.findByMultipleIds(vpstrde2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Vpstrde2 update(Vpstrde2 vpstrde2) {
        LOGGER.debug("Updating Vpstrde2 with information: {}", vpstrde2);

        this.wmGenericDao.update(vpstrde2);
        this.wmGenericDao.refresh(vpstrde2);

        return vpstrde2;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vpstrde2 partialUpdate(Vpstrde2Id vpstrde2Id, Map<String, Object>vpstrde2Patch) {
        LOGGER.debug("Partially Updating the Vpstrde2 with id: {}", vpstrde2Id);

        Vpstrde2 vpstrde2 = getById(vpstrde2Id);

        try {
            ObjectReader vpstrde2Reader = this.objectMapper.readerForUpdating(vpstrde2);
            vpstrde2 = vpstrde2Reader.readValue(this.objectMapper.writeValueAsString(vpstrde2Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vpstrde2Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vpstrde2 = update(vpstrde2);

        return vpstrde2;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vpstrde2 delete(Vpstrde2Id vpstrde2Id) {
        LOGGER.debug("Deleting Vpstrde2 with id: {}", vpstrde2Id);
        Vpstrde2 deleted = this.wmGenericDao.findById(vpstrde2Id);
        if (deleted == null) {
            LOGGER.debug("No Vpstrde2 found with id: {}", vpstrde2Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Vpstrde2.class.getSimpleName(), vpstrde2Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Vpstrde2 vpstrde2) {
        LOGGER.debug("Deleting Vpstrde2 with {}", vpstrde2);
        this.wmGenericDao.delete(vpstrde2);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vpstrde2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vpstrde2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vpstrde2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vpstrde2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vpstrde2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vpstrde2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}