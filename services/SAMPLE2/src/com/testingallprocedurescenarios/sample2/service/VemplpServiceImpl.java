/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Vemplp;
import com.testingallprocedurescenarios.sample2.VemplpId;


/**
 * ServiceImpl object for domain model class Vemplp.
 *
 * @see Vemplp
 */
@Service("SAMPLE2.VemplpService")
@Validated
public class VemplpServiceImpl implements VemplpService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VemplpServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.VemplpDao")
    private WMGenericDao<Vemplp, VemplpId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vemplp, VemplpId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vemplp create(Vemplp vemplp) {
        LOGGER.debug("Creating a new Vemplp with information: {}", vemplp);

        Vemplp vemplpCreated = this.wmGenericDao.create(vemplp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vemplpCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vemplp getById(VemplpId vemplpId) {
        LOGGER.debug("Finding Vemplp by id: {}", vemplpId);
        return this.wmGenericDao.findById(vemplpId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vemplp findById(VemplpId vemplpId) {
        LOGGER.debug("Finding Vemplp by id: {}", vemplpId);
        try {
            return this.wmGenericDao.findById(vemplpId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Vemplp found with id: {}", vemplpId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Vemplp> findByMultipleIds(List<VemplpId> vemplpIds, boolean orderedReturn) {
        LOGGER.debug("Finding Vemplps by ids: {}", vemplpIds);

        return this.wmGenericDao.findByMultipleIds(vemplpIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Vemplp update(Vemplp vemplp) {
        LOGGER.debug("Updating Vemplp with information: {}", vemplp);

        this.wmGenericDao.update(vemplp);
        this.wmGenericDao.refresh(vemplp);

        return vemplp;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vemplp delete(VemplpId vemplpId) {
        LOGGER.debug("Deleting Vemplp with id: {}", vemplpId);
        Vemplp deleted = this.wmGenericDao.findById(vemplpId);
        if (deleted == null) {
            LOGGER.debug("No Vemplp found with id: {}", vemplpId);
            throw new EntityNotFoundException(String.valueOf(vemplpId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Vemplp vemplp) {
        LOGGER.debug("Deleting Vemplp with {}", vemplp);
        this.wmGenericDao.delete(vemplp);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vemplp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vemplps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vemplp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vemplps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vemplp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vemplp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}