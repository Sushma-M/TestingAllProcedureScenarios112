/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Vempdpt1;
import com.testingallprocedurescenarios.sample2.Vempdpt1Id;


/**
 * ServiceImpl object for domain model class Vempdpt1.
 *
 * @see Vempdpt1
 */
@Service("SAMPLE2.Vempdpt1Service")
@Validated
public class Vempdpt1ServiceImpl implements Vempdpt1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vempdpt1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.Vempdpt1Dao")
    private WMGenericDao<Vempdpt1, Vempdpt1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vempdpt1, Vempdpt1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vempdpt1 create(Vempdpt1 vempdpt1) {
        LOGGER.debug("Creating a new Vempdpt1 with information: {}", vempdpt1);

        Vempdpt1 vempdpt1Created = this.wmGenericDao.create(vempdpt1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vempdpt1Created);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vempdpt1 getById(Vempdpt1Id vempdpt1Id) {
        LOGGER.debug("Finding Vempdpt1 by id: {}", vempdpt1Id);
        return this.wmGenericDao.findById(vempdpt1Id);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vempdpt1 findById(Vempdpt1Id vempdpt1Id) {
        LOGGER.debug("Finding Vempdpt1 by id: {}", vempdpt1Id);
        try {
            return this.wmGenericDao.findById(vempdpt1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Vempdpt1 found with id: {}", vempdpt1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Vempdpt1> findByMultipleIds(List<Vempdpt1Id> vempdpt1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Vempdpt1s by ids: {}", vempdpt1Ids);

        return this.wmGenericDao.findByMultipleIds(vempdpt1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Vempdpt1 update(Vempdpt1 vempdpt1) {
        LOGGER.debug("Updating Vempdpt1 with information: {}", vempdpt1);

        this.wmGenericDao.update(vempdpt1);
        this.wmGenericDao.refresh(vempdpt1);

        return vempdpt1;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vempdpt1 delete(Vempdpt1Id vempdpt1Id) {
        LOGGER.debug("Deleting Vempdpt1 with id: {}", vempdpt1Id);
        Vempdpt1 deleted = this.wmGenericDao.findById(vempdpt1Id);
        if (deleted == null) {
            LOGGER.debug("No Vempdpt1 found with id: {}", vempdpt1Id);
            throw new EntityNotFoundException(String.valueOf(vempdpt1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Vempdpt1 vempdpt1) {
        LOGGER.debug("Deleting Vempdpt1 with {}", vempdpt1);
        this.wmGenericDao.delete(vempdpt1);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vempdpt1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vempdpt1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vempdpt1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vempdpt1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vempdpt1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vempdpt1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}