/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Vastrde1;
import com.testingallprocedurescenarios.sample2.Vastrde1Id;


/**
 * ServiceImpl object for domain model class Vastrde1.
 *
 * @see Vastrde1
 */
@Service("SAMPLE2.Vastrde1Service")
@Validated
public class Vastrde1ServiceImpl implements Vastrde1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vastrde1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.Vastrde1Dao")
    private WMGenericDao<Vastrde1, Vastrde1Id> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Vastrde1, Vastrde1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vastrde1 create(Vastrde1 vastrde1) {
        LOGGER.debug("Creating a new Vastrde1 with information: {}", vastrde1);

        Vastrde1 vastrde1Created = this.wmGenericDao.create(vastrde1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vastrde1Created);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vastrde1 getById(Vastrde1Id vastrde1Id) {
        LOGGER.debug("Finding Vastrde1 by id: {}", vastrde1Id);
        return this.wmGenericDao.findById(vastrde1Id);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vastrde1 findById(Vastrde1Id vastrde1Id) {
        LOGGER.debug("Finding Vastrde1 by id: {}", vastrde1Id);
        try {
            return this.wmGenericDao.findById(vastrde1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Vastrde1 found with id: {}", vastrde1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Vastrde1> findByMultipleIds(List<Vastrde1Id> vastrde1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Vastrde1s by ids: {}", vastrde1Ids);

        return this.wmGenericDao.findByMultipleIds(vastrde1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Vastrde1 update(Vastrde1 vastrde1) {
        LOGGER.debug("Updating Vastrde1 with information: {}", vastrde1);

        this.wmGenericDao.update(vastrde1);
        this.wmGenericDao.refresh(vastrde1);

        return vastrde1;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vastrde1 partialUpdate(Vastrde1Id vastrde1Id, Map<String, Object>vastrde1Patch) {
        LOGGER.debug("Partially Updating the Vastrde1 with id: {}", vastrde1Id);

        Vastrde1 vastrde1 = getById(vastrde1Id);

        try {
            ObjectReader vastrde1Reader = this.objectMapper.readerForUpdating(vastrde1);
            vastrde1 = vastrde1Reader.readValue(this.objectMapper.writeValueAsString(vastrde1Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vastrde1Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vastrde1 = update(vastrde1);

        return vastrde1;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vastrde1 delete(Vastrde1Id vastrde1Id) {
        LOGGER.debug("Deleting Vastrde1 with id: {}", vastrde1Id);
        Vastrde1 deleted = this.wmGenericDao.findById(vastrde1Id);
        if (deleted == null) {
            LOGGER.debug("No Vastrde1 found with id: {}", vastrde1Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Vastrde1.class.getSimpleName(), vastrde1Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Vastrde1 vastrde1) {
        LOGGER.debug("Deleting Vastrde1 with {}", vastrde1);
        this.wmGenericDao.delete(vastrde1);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vastrde1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vastrde1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vastrde1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vastrde1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vastrde1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vastrde1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}