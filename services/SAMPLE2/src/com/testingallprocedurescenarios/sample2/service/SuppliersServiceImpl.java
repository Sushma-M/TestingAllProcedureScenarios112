/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Suppliers;


/**
 * ServiceImpl object for domain model class Suppliers.
 *
 * @see Suppliers
 */
@Service("SAMPLE2.SuppliersService")
@Validated
public class SuppliersServiceImpl implements SuppliersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SuppliersServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.SuppliersDao")
    private WMGenericDao<Suppliers, String> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Suppliers, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Suppliers create(Suppliers suppliers) {
        LOGGER.debug("Creating a new Suppliers with information: {}", suppliers);

        Suppliers suppliersCreated = this.wmGenericDao.create(suppliers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(suppliersCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Suppliers getById(String suppliersId) {
        LOGGER.debug("Finding Suppliers by id: {}", suppliersId);
        return this.wmGenericDao.findById(suppliersId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Suppliers findById(String suppliersId) {
        LOGGER.debug("Finding Suppliers by id: {}", suppliersId);
        try {
            return this.wmGenericDao.findById(suppliersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Suppliers found with id: {}", suppliersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Suppliers> findByMultipleIds(List<String> suppliersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Suppliers by ids: {}", suppliersIds);

        return this.wmGenericDao.findByMultipleIds(suppliersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Suppliers update(Suppliers suppliers) {
        LOGGER.debug("Updating Suppliers with information: {}", suppliers);

        this.wmGenericDao.update(suppliers);
        this.wmGenericDao.refresh(suppliers);

        return suppliers;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Suppliers partialUpdate(String suppliersId, Map<String, Object>suppliersPatch) {
        LOGGER.debug("Partially Updating the Suppliers with id: {}", suppliersId);

        Suppliers suppliers = getById(suppliersId);

        try {
            ObjectReader suppliersReader = this.objectMapper.readerForUpdating(suppliers);
            suppliers = suppliersReader.readValue(this.objectMapper.writeValueAsString(suppliersPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", suppliersPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        suppliers = update(suppliers);

        return suppliers;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Suppliers delete(String suppliersId) {
        LOGGER.debug("Deleting Suppliers with id: {}", suppliersId);
        Suppliers deleted = this.wmGenericDao.findById(suppliersId);
        if (deleted == null) {
            LOGGER.debug("No Suppliers found with id: {}", suppliersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Suppliers.class.getSimpleName(), suppliersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Suppliers suppliers) {
        LOGGER.debug("Deleting Suppliers with {}", suppliers);
        this.wmGenericDao.delete(suppliers);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Suppliers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Suppliers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Suppliers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Suppliers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Suppliers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Suppliers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}