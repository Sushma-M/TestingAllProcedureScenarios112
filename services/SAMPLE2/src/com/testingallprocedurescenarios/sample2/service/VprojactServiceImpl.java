/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Vprojact;
import com.testingallprocedurescenarios.sample2.VprojactId;


/**
 * ServiceImpl object for domain model class Vprojact.
 *
 * @see Vprojact
 */
@Service("SAMPLE2.VprojactService")
@Validated
public class VprojactServiceImpl implements VprojactService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VprojactServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.VprojactDao")
    private WMGenericDao<Vprojact, VprojactId> wmGenericDao;

    @Autowired
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Vprojact, VprojactId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vprojact create(Vprojact vprojact) {
        LOGGER.debug("Creating a new Vprojact with information: {}", vprojact);

        Vprojact vprojactCreated = this.wmGenericDao.create(vprojact);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vprojactCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vprojact getById(VprojactId vprojactId) {
        LOGGER.debug("Finding Vprojact by id: {}", vprojactId);
        return this.wmGenericDao.findById(vprojactId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vprojact findById(VprojactId vprojactId) {
        LOGGER.debug("Finding Vprojact by id: {}", vprojactId);
        try {
            return this.wmGenericDao.findById(vprojactId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Vprojact found with id: {}", vprojactId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Vprojact> findByMultipleIds(List<VprojactId> vprojactIds, boolean orderedReturn) {
        LOGGER.debug("Finding Vprojacts by ids: {}", vprojactIds);

        return this.wmGenericDao.findByMultipleIds(vprojactIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Vprojact update(Vprojact vprojact) {
        LOGGER.debug("Updating Vprojact with information: {}", vprojact);

        this.wmGenericDao.update(vprojact);
        this.wmGenericDao.refresh(vprojact);

        return vprojact;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vprojact partialUpdate(VprojactId vprojactId, Map<String, Object>vprojactPatch) {
        LOGGER.debug("Partially Updating the Vprojact with id: {}", vprojactId);

        Vprojact vprojact = getById(vprojactId);

        try {
            ObjectReader vprojactReader = this.objectMapper.readerForUpdating(vprojact);
            vprojact = vprojactReader.readValue(this.objectMapper.writeValueAsString(vprojactPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vprojactPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vprojact = update(vprojact);

        return vprojact;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vprojact delete(VprojactId vprojactId) {
        LOGGER.debug("Deleting Vprojact with id: {}", vprojactId);
        Vprojact deleted = this.wmGenericDao.findById(vprojactId);
        if (deleted == null) {
            LOGGER.debug("No Vprojact found with id: {}", vprojactId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Vprojact.class.getSimpleName(), vprojactId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Vprojact vprojact) {
        LOGGER.debug("Deleting Vprojact with {}", vprojact);
        this.wmGenericDao.delete(vprojact);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vprojact> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vprojacts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vprojact> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vprojacts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vprojact to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vprojact to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}