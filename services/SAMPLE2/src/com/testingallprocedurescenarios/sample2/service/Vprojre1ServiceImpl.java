/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.Vprojre1;
import com.testingallprocedurescenarios.sample2.Vprojre1Id;


/**
 * ServiceImpl object for domain model class Vprojre1.
 *
 * @see Vprojre1
 */
@Service("SAMPLE2.Vprojre1Service")
@Validated
public class Vprojre1ServiceImpl implements Vprojre1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Vprojre1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.Vprojre1Dao")
    private WMGenericDao<Vprojre1, Vprojre1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vprojre1, Vprojre1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vprojre1 create(Vprojre1 vprojre1) {
        LOGGER.debug("Creating a new Vprojre1 with information: {}", vprojre1);

        Vprojre1 vprojre1Created = this.wmGenericDao.create(vprojre1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vprojre1Created);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vprojre1 getById(Vprojre1Id vprojre1Id) {
        LOGGER.debug("Finding Vprojre1 by id: {}", vprojre1Id);
        return this.wmGenericDao.findById(vprojre1Id);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Vprojre1 findById(Vprojre1Id vprojre1Id) {
        LOGGER.debug("Finding Vprojre1 by id: {}", vprojre1Id);
        try {
            return this.wmGenericDao.findById(vprojre1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Vprojre1 found with id: {}", vprojre1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<Vprojre1> findByMultipleIds(List<Vprojre1Id> vprojre1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Vprojre1s by ids: {}", vprojre1Ids);

        return this.wmGenericDao.findByMultipleIds(vprojre1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public Vprojre1 update(Vprojre1 vprojre1) {
        LOGGER.debug("Updating Vprojre1 with information: {}", vprojre1);

        this.wmGenericDao.update(vprojre1);
        this.wmGenericDao.refresh(vprojre1);

        return vprojre1;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public Vprojre1 delete(Vprojre1Id vprojre1Id) {
        LOGGER.debug("Deleting Vprojre1 with id: {}", vprojre1Id);
        Vprojre1 deleted = this.wmGenericDao.findById(vprojre1Id);
        if (deleted == null) {
            LOGGER.debug("No Vprojre1 found with id: {}", vprojre1Id);
            throw new EntityNotFoundException(String.valueOf(vprojre1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(Vprojre1 vprojre1) {
        LOGGER.debug("Deleting Vprojre1 with {}", vprojre1);
        this.wmGenericDao.delete(vprojre1);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vprojre1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vprojre1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Vprojre1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vprojre1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vprojre1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table Vprojre1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}