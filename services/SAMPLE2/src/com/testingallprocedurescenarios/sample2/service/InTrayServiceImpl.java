/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.sample2.InTray;
import com.testingallprocedurescenarios.sample2.InTrayId;


/**
 * ServiceImpl object for domain model class InTray.
 *
 * @see InTray
 */
@Service("SAMPLE2.InTrayService")
@Validated
public class InTrayServiceImpl implements InTrayService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InTrayServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE2.InTrayDao")
    private WMGenericDao<InTray, InTrayId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InTray, InTrayId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public InTray create(InTray inTray) {
        LOGGER.debug("Creating a new InTray with information: {}", inTray);

        InTray inTrayCreated = this.wmGenericDao.create(inTray);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(inTrayCreated);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public InTray getById(InTrayId intrayId) {
        LOGGER.debug("Finding InTray by id: {}", intrayId);
        return this.wmGenericDao.findById(intrayId);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public InTray findById(InTrayId intrayId) {
        LOGGER.debug("Finding InTray by id: {}", intrayId);
        try {
            return this.wmGenericDao.findById(intrayId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No InTray found with id: {}", intrayId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public List<InTray> findByMultipleIds(List<InTrayId> intrayIds, boolean orderedReturn) {
        LOGGER.debug("Finding InTrays by ids: {}", intrayIds);

        return this.wmGenericDao.findByMultipleIds(intrayIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLE2TransactionManager")
    @Override
    public InTray update(InTray inTray) {
        LOGGER.debug("Updating InTray with information: {}", inTray);

        this.wmGenericDao.update(inTray);
        this.wmGenericDao.refresh(inTray);

        return inTray;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public InTray delete(InTrayId intrayId) {
        LOGGER.debug("Deleting InTray with id: {}", intrayId);
        InTray deleted = this.wmGenericDao.findById(intrayId);
        if (deleted == null) {
            LOGGER.debug("No InTray found with id: {}", intrayId);
            throw new EntityNotFoundException(String.valueOf(intrayId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "SAMPLE2TransactionManager")
    @Override
    public void delete(InTray inTray) {
        LOGGER.debug("Deleting InTray with {}", inTray);
        this.wmGenericDao.delete(inTray);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<InTray> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InTrays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<InTray> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InTrays");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table InTray to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service SAMPLE2 for table InTray to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLE2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}