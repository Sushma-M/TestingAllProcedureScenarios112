/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.sample2.Staffg;
import com.testingallprocedurescenarios.sample2.service.StaffgService;


/**
 * Controller object for domain model class Staffg.
 * @see Staffg
 */
@RestController("SAMPLE2.StaffgController")
@Api(value = "StaffgController", description = "Exposes APIs to work with Staffg resource.")
@RequestMapping("/SAMPLE2/Staffg")
public class StaffgController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StaffgController.class);

    @Autowired
	@Qualifier("SAMPLE2.StaffgService")
	private StaffgService staffgService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Staffg instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Staffg createStaffg(@RequestBody Staffg staffg) {
		LOGGER.debug("Create Staffg with information: {}" , staffg);

		staffg = staffgService.create(staffg);
		LOGGER.debug("Created Staffg with information: {}" , staffg);

	    return staffg;
	}

    @ApiOperation(value = "Returns the Staffg instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Staffg getStaffg(@PathVariable("id") Short id) {
        LOGGER.debug("Getting Staffg with id: {}" , id);

        Staffg foundStaffg = staffgService.getById(id);
        LOGGER.debug("Staffg details with id: {}" , foundStaffg);

        return foundStaffg;
    }

    @ApiOperation(value = "Updates the Staffg instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Staffg editStaffg(@PathVariable("id") Short id, @RequestBody Staffg staffg) {
        LOGGER.debug("Editing Staffg with id: {}" , staffg.getId());

        staffg.setId(id);
        staffg = staffgService.update(staffg);
        LOGGER.debug("Staffg details with id: {}" , staffg);

        return staffg;
    }
    
    @ApiOperation(value = "Partially updates the Staffg instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Staffg patchStaffg(@PathVariable("id") Short id, @RequestBody @MapTo(Staffg.class) Map<String, Object> staffgPatch) {
        LOGGER.debug("Partially updating Staffg with id: {}" , id);

        Staffg staffg = staffgService.partialUpdate(id, staffgPatch);
        LOGGER.debug("Staffg details after partial update: {}" , staffg);

        return staffg;
    }

    @ApiOperation(value = "Deletes the Staffg instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStaffg(@PathVariable("id") Short id) {
        LOGGER.debug("Deleting Staffg with id: {}" , id);

        Staffg deletedStaffg = staffgService.delete(id);

        return deletedStaffg != null;
    }

    /**
     * @deprecated Use {@link #findStaffgs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Staffg instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Staffg> searchStaffgsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Staffgs list by query filter:{}", (Object) queryFilters);
        return staffgService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Staffg instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Staffg> findStaffgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Staffgs list by filter:", query);
        return staffgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Staffg instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Staffg> filterStaffgs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Staffgs list by filter", query);
        return staffgService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportStaffgs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return staffgService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportStaffgsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Staffg.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> staffgService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Staffg instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countStaffgs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Staffgs");
		return staffgService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getStaffgAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return staffgService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StaffgService instance
	 */
	protected void setStaffgService(StaffgService service) {
		this.staffgService = service;
	}

}