/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.sample2.Db2alltypes1;
import com.testingallprocedurescenarios.sample2.service.Db2alltypes1Service;


/**
 * Controller object for domain model class Db2alltypes1.
 * @see Db2alltypes1
 */
@RestController("SAMPLE2.Db2alltypes1Controller")
@Api(value = "Db2alltypes1Controller", description = "Exposes APIs to work with Db2alltypes1 resource.")
@RequestMapping("/SAMPLE2/Db2alltypes1")
public class Db2alltypes1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Db2alltypes1Controller.class);

    @Autowired
	@Qualifier("SAMPLE2.Db2alltypes1Service")
	private Db2alltypes1Service db2alltypes1Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Db2alltypes1 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Db2alltypes1 createDb2alltypes1(@RequestPart("wm_data_json") Db2alltypes1 db2alltypes1, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create Db2alltypes1 with information: {}" , db2alltypes1);

    db2alltypes1.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		db2alltypes1 = db2alltypes1Service.create(db2alltypes1);
		LOGGER.debug("Created Db2alltypes1 with information: {}" , db2alltypes1);

	    return db2alltypes1;
	}

    @ApiOperation(value = "Returns the Db2alltypes1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Db2alltypes1 getDb2alltypes1(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Db2alltypes1 with id: {}" , id);

        Db2alltypes1 foundDb2alltypes1 = db2alltypes1Service.getById(id);
        LOGGER.debug("Db2alltypes1 details with id: {}" , foundDb2alltypes1);

        return foundDb2alltypes1;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Db2alltypes1 instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getDb2alltypes1BLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Db2alltypes1 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Db2alltypes1.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Db2alltypes1 db2alltypes1 = db2alltypes1Service.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(db2alltypes1, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Db2alltypes1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Db2alltypes1 editDb2alltypes1(@PathVariable("id") Integer id, @RequestBody Db2alltypes1 db2alltypes1) {
        LOGGER.debug("Editing Db2alltypes1 with id: {}" , db2alltypes1.getIntcol());

        db2alltypes1.setIntcol(id);
        db2alltypes1 = db2alltypes1Service.update(db2alltypes1);
        LOGGER.debug("Db2alltypes1 details with id: {}" , db2alltypes1);

        return db2alltypes1;
    }

    @ApiOperation(value = "Updates the Db2alltypes1 instance associated with the given id.This API should be used when Db2alltypes1 instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Db2alltypes1 editDb2alltypes1(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Db2alltypes1 newDb2alltypes1 = WMMultipartUtils.toObject(multipartHttpServletRequest, Db2alltypes1.class, "SAMPLE2");
        newDb2alltypes1.setIntcol(id);

        Db2alltypes1 oldDb2alltypes1 = db2alltypes1Service.getById(id);
        WMMultipartUtils.updateLobsContent(oldDb2alltypes1, newDb2alltypes1);
        LOGGER.debug("Updating Db2alltypes1 with information: {}" , newDb2alltypes1);

        return db2alltypes1Service.update(newDb2alltypes1);
    }

    @ApiOperation(value = "Deletes the Db2alltypes1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDb2alltypes1(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Db2alltypes1 with id: {}" , id);

        Db2alltypes1 deletedDb2alltypes1 = db2alltypes1Service.delete(id);

        return deletedDb2alltypes1 != null;
    }

    @RequestMapping(value = "/smallintcol/{smallintcol}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Db2alltypes1 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Db2alltypes1 getBySmallintcol(@PathVariable("smallintcol") short smallintcol) {
        LOGGER.debug("Getting Db2alltypes1 with uniques key Smallintcol");
        return db2alltypes1Service.getBySmallintcol(smallintcol);
    }

    /**
     * @deprecated Use {@link #findDb2alltypes1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Db2alltypes1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Db2alltypes1> searchDb2alltypes1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Db2alltypes1s list by query filter:{}", (Object) queryFilters);
        return db2alltypes1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Db2alltypes1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Db2alltypes1> findDb2alltypes1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Db2alltypes1s list by filter:", query);
        return db2alltypes1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Db2alltypes1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Db2alltypes1> filterDb2alltypes1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Db2alltypes1s list by filter", query);
        return db2alltypes1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDb2alltypes1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return db2alltypes1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportDb2alltypes1sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Db2alltypes1.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> db2alltypes1Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Db2alltypes1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDb2alltypes1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Db2alltypes1s");
		return db2alltypes1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDb2alltypes1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return db2alltypes1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Db2alltypes1Service instance
	 */
	protected void setDb2alltypes1Service(Db2alltypes1Service service) {
		this.db2alltypes1Service = service;
	}

}