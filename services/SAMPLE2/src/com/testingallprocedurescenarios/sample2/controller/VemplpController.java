/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.sample2.Vemplp;
import com.testingallprocedurescenarios.sample2.VemplpId;
import com.testingallprocedurescenarios.sample2.service.VemplpService;


/**
 * Controller object for domain model class Vemplp.
 * @see Vemplp
 */
@RestController("SAMPLE2.VemplpController")
@Api(value = "VemplpController", description = "Exposes APIs to work with Vemplp resource.")
@RequestMapping("/SAMPLE2/Vemplp")
public class VemplpController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VemplpController.class);

    @Autowired
	@Qualifier("SAMPLE2.VemplpService")
	private VemplpService vemplpService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Vemplp instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemplp createVemplp(@RequestBody Vemplp vemplp) {
		LOGGER.debug("Create Vemplp with information: {}" , vemplp);

		vemplp = vemplpService.create(vemplp);
		LOGGER.debug("Created Vemplp with information: {}" , vemplp);

	    return vemplp;
	}

    @ApiOperation(value = "Returns the Vemplp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemplp getVemplp(@RequestParam("employeenumber") String employeenumber, @RequestParam("phonenumber") String phonenumber) {

        VemplpId vemplpId = new VemplpId();
        vemplpId.setEmployeenumber(employeenumber);
        vemplpId.setPhonenumber(phonenumber);

        LOGGER.debug("Getting Vemplp with id: {}" , vemplpId);
        Vemplp vemplp = vemplpService.getById(vemplpId);
        LOGGER.debug("Vemplp details with id: {}" , vemplp);

        return vemplp;
    }



    @ApiOperation(value = "Updates the Vemplp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemplp editVemplp(@RequestParam("employeenumber") String employeenumber, @RequestParam("phonenumber") String phonenumber, @RequestBody Vemplp vemplp) {

        vemplp.setEmployeenumber(employeenumber);
        vemplp.setPhonenumber(phonenumber);

        LOGGER.debug("Vemplp details with id is updated with: {}" , vemplp);

        return vemplpService.update(vemplp);
    }

	@ApiOperation(value = "Partially updates the  Vemplp instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vemplp patchVemplp(@RequestParam("employeenumber") String employeenumber, @RequestParam("phonenumber") String phonenumber, @RequestBody @MapTo(Vemplp.class) Map<String, Object> vemplpPatch) {

        VemplpId vemplpId = new VemplpId();
        vemplpId.setEmployeenumber(employeenumber);
        vemplpId.setPhonenumber(phonenumber);
        LOGGER.debug("Partially updating Vemplp with id: {}" , vemplpId);

        Vemplp vemplp = vemplpService.partialUpdate(vemplpId, vemplpPatch);
        LOGGER.debug("Vemplp details after partial update: {}" , vemplp);

        return vemplp;
    }


    @ApiOperation(value = "Deletes the Vemplp instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVemplp(@RequestParam("employeenumber") String employeenumber, @RequestParam("phonenumber") String phonenumber) {

        VemplpId vemplpId = new VemplpId();
        vemplpId.setEmployeenumber(employeenumber);
        vemplpId.setPhonenumber(phonenumber);

        LOGGER.debug("Deleting Vemplp with id: {}" , vemplpId);
        Vemplp vemplp = vemplpService.delete(vemplpId);

        return vemplp != null;
    }


    /**
     * @deprecated Use {@link #findVemplps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vemplp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Vemplp> searchVemplpsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vemplps list by query filter:{}", (Object) queryFilters);
        return vemplpService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vemplp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vemplp> findVemplps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vemplps list by filter:", query);
        return vemplpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vemplp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Vemplp> filterVemplps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vemplps list by filter", query);
        return vemplpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportVemplps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vemplpService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportVemplpsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Vemplp.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vemplpService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Vemplp instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countVemplps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vemplps");
		return vemplpService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getVemplpAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vemplpService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VemplpService instance
	 */
	protected void setVemplpService(VemplpService service) {
		this.vemplpService = service;
	}

}