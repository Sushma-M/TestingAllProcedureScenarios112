/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.sample2.Vact;
import com.testingallprocedurescenarios.sample2.VactId;
import com.testingallprocedurescenarios.sample2.service.VactService;


/**
 * Controller object for domain model class Vact.
 * @see Vact
 */
@RestController("SAMPLE2.VactController")
@Api(value = "VactController", description = "Exposes APIs to work with Vact resource.")
@RequestMapping("/SAMPLE2/Vact")
public class VactController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VactController.class);

    @Autowired
	@Qualifier("SAMPLE2.VactService")
	private VactService vactService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Vact instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vact createVact(@RequestBody Vact vact) {
		LOGGER.debug("Create Vact with information: {}" , vact);

		vact = vactService.create(vact);
		LOGGER.debug("Created Vact with information: {}" , vact);

	    return vact;
	}

    @ApiOperation(value = "Returns the Vact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vact getVact(@RequestParam("actno") Short actno, @RequestParam("actkwd") String actkwd, @RequestParam("actdesc") String actdesc) {

        VactId vactId = new VactId();
        vactId.setActno(actno);
        vactId.setActkwd(actkwd);
        vactId.setActdesc(actdesc);

        LOGGER.debug("Getting Vact with id: {}" , vactId);
        Vact vact = vactService.getById(vactId);
        LOGGER.debug("Vact details with id: {}" , vact);

        return vact;
    }



    @ApiOperation(value = "Updates the Vact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vact editVact(@RequestParam("actno") Short actno, @RequestParam("actkwd") String actkwd, @RequestParam("actdesc") String actdesc, @RequestBody Vact vact) {

        vact.setActno(actno);
        vact.setActkwd(actkwd);
        vact.setActdesc(actdesc);

        LOGGER.debug("Vact details with id is updated with: {}" , vact);

        return vactService.update(vact);
    }

	@ApiOperation(value = "Partially updates the  Vact instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vact patchVact(@RequestParam("actno") Short actno, @RequestParam("actkwd") String actkwd, @RequestParam("actdesc") String actdesc, @RequestBody @MapTo(Vact.class) Map<String, Object> vactPatch) {

        VactId vactId = new VactId();
        vactId.setActno(actno);
        vactId.setActkwd(actkwd);
        vactId.setActdesc(actdesc);
        LOGGER.debug("Partially updating Vact with id: {}" , vactId);

        Vact vact = vactService.partialUpdate(vactId, vactPatch);
        LOGGER.debug("Vact details after partial update: {}" , vact);

        return vact;
    }


    @ApiOperation(value = "Deletes the Vact instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVact(@RequestParam("actno") Short actno, @RequestParam("actkwd") String actkwd, @RequestParam("actdesc") String actdesc) {

        VactId vactId = new VactId();
        vactId.setActno(actno);
        vactId.setActkwd(actkwd);
        vactId.setActdesc(actdesc);

        LOGGER.debug("Deleting Vact with id: {}" , vactId);
        Vact vact = vactService.delete(vactId);

        return vact != null;
    }


    /**
     * @deprecated Use {@link #findVacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vact instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Vact> searchVactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vacts list by query filter:{}", (Object) queryFilters);
        return vactService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vact instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vact> findVacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vacts list by filter:", query);
        return vactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vact instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Vact> filterVacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vacts list by filter", query);
        return vactService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportVacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vactService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportVactsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Vact.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vactService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Vact instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countVacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vacts");
		return vactService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getVactAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vactService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VactService instance
	 */
	protected void setVactService(VactService service) {
		this.vactService = service;
	}

}