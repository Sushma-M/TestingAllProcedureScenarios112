/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.sample2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Department generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`DEPARTMENT`")
public class Department implements Serializable {

    private String deptno;
    private String deptname;
    private String mgrno;
    private String admrdept;
    private String location;
    private Department departmentByAdmrdept;
    private Employee employeeByMgrno;
    private List<Department> departmentsForAdmrdept;
    private List<Employee> employeesForWorkdept;
    private List<Project> projects;

    @Id
    @Column(name = "`DEPTNO`", nullable = false, length = 3)
    public String getDeptno() {
        return this.deptno;
    }

    public void setDeptno(String deptno) {
        this.deptno = deptno;
    }

    @Column(name = "`DEPTNAME`", nullable = false, length = 36)
    public String getDeptname() {
        return this.deptname;
    }

    public void setDeptname(String deptname) {
        this.deptname = deptname;
    }

    @Column(name = "`MGRNO`", nullable = true, length = 6)
    public String getMgrno() {
        return this.mgrno;
    }

    public void setMgrno(String mgrno) {
        this.mgrno = mgrno;
    }

    @Column(name = "`ADMRDEPT`", nullable = false, length = 3)
    public String getAdmrdept() {
        return this.admrdept;
    }

    public void setAdmrdept(String admrdept) {
        this.admrdept = admrdept;
    }

    @Column(name = "`LOCATION`", nullable = true, length = 16)
    public String getLocation() {
        return this.location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"departmentByAdmrdept", "departmentsForAdmrdept"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ADMRDEPT`", referencedColumnName = "`DEPTNO`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`ROD`"))
    @Fetch(FetchMode.JOIN)
    public Department getDepartmentByAdmrdept() {
        return this.departmentByAdmrdept;
    }

    public void setDepartmentByAdmrdept(Department departmentByAdmrdept) {
        if(departmentByAdmrdept != null) {
            this.admrdept = departmentByAdmrdept.getDeptno();
        }

        this.departmentByAdmrdept = departmentByAdmrdept;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`MGRNO`", referencedColumnName = "`EMPNO`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`RDE`"))
    @Fetch(FetchMode.JOIN)
    public Employee getEmployeeByMgrno() {
        return this.employeeByMgrno;
    }

    public void setEmployeeByMgrno(Employee employeeByMgrno) {
        if(employeeByMgrno != null) {
            this.mgrno = employeeByMgrno.getEmpno();
        }

        this.employeeByMgrno = employeeByMgrno;
    }
    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"departmentByAdmrdept", "departmentsForAdmrdept"})
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "departmentByAdmrdept")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Department> getDepartmentsForAdmrdept() {
        return this.departmentsForAdmrdept;
    }

    public void setDepartmentsForAdmrdept(List<Department> departmentsForAdmrdept) {
        this.departmentsForAdmrdept = departmentsForAdmrdept;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "departmentByWorkdept")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Employee> getEmployeesForWorkdept() {
        return this.employeesForWorkdept;
    }

    public void setEmployeesForWorkdept(List<Employee> employeesForWorkdept) {
        this.employeesForWorkdept = employeesForWorkdept;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "department")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Project> getProjects() {
        return this.projects;
    }

    public void setProjects(List<Project> projects) {
        this.projects = projects;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Department)) return false;
        final Department department = (Department) o;
        return Objects.equals(getDeptno(), department.getDeptno());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getDeptno());
    }
}