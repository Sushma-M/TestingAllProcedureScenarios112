/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.sql.Time;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.wavemaker.runtime.data.annotations.WMValueInject;
import com.wavemaker.runtime.data.replacers.Scope;
import com.wavemaker.runtime.data.replacers.providers.VariableType;

/**
 * ShortseqtServerdef generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`SHORTSEQT_SERVERDEF`")
public class ShortseqtServerdef implements Serializable {

    private Integer shortid;
    @WMValueInject( type = VariableType.SERVER, name = "USER_NAME", scopes = { Scope.UPDATE, Scope.INSERT })
    private String username;
    @WMValueInject( type = VariableType.SERVER, name = "USER_ID", scopes = { Scope.UPDATE, Scope.INSERT })
    private short id;
    @WMValueInject( type = VariableType.SERVER, name = "DATE", scopes = { Scope.UPDATE, Scope.INSERT })
    private Date curDate;
    @WMValueInject( type = VariableType.SERVER, name = "TIME", scopes = { Scope.UPDATE, Scope.INSERT })
    private Time curTime;
    private String charCol;
    @WMValueInject( type = VariableType.SERVER, name = "DATE", scopes = { Scope.UPDATE, Scope.INSERT })
    private Date currentDateInsert;
    @WMValueInject( type = VariableType.SERVER, name = "TIME", scopes = { Scope.UPDATE, Scope.INSERT })
    private Time currentTimeInsert;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`CountBy!`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`SHORTID`", nullable = false, scale = 0, precision = 10)
    public Integer getShortid() {
        return this.shortid;
    }

    public void setShortid(Integer shortid) {
        this.shortid = shortid;
    }

    @Column(name = "`USERNAME`", nullable = false, length = 255)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "`ID`", nullable = false, scale = 0, precision = 5)
    public short getId() {
        return this.id;
    }

    public void setId(short id) {
        this.id = id;
    }

    @Column(name = "`CUR DATE`", nullable = false)
    public Date getCurDate() {
        return this.curDate;
    }

    public void setCurDate(Date curDate) {
        this.curDate = curDate;
    }

    @Column(name = "`CUR TIME`", nullable = false)
    public Time getCurTime() {
        return this.curTime;
    }

    public void setCurTime(Time curTime) {
        this.curTime = curTime;
    }

    @Column(name = "`CHAR COL`", nullable = true, length = 1)
    public String getCharCol() {
        return this.charCol;
    }

    public void setCharCol(String charCol) {
        this.charCol = charCol;
    }

    @Column(name = "`CURRENT DATE INSERT`", nullable = true)
    public Date getCurrentDateInsert() {
        return this.currentDateInsert;
    }

    public void setCurrentDateInsert(Date currentDateInsert) {
        this.currentDateInsert = currentDateInsert;
    }

    @Column(name = "`CURRENT TIME INSERT`", nullable = true)
    public Time getCurrentTimeInsert() {
        return this.currentTimeInsert;
    }

    public void setCurrentTimeInsert(Time currentTimeInsert) {
        this.currentTimeInsert = currentTimeInsert;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ShortseqtServerdef)) return false;
        final ShortseqtServerdef shortseqtServerdef = (ShortseqtServerdef) o;
        return Objects.equals(getShortid(), shortseqtServerdef.getShortid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getShortid());
    }
}