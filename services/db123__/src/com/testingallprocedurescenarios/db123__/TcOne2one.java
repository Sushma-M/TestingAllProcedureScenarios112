/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * TcOne2one generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`TC_ONE2ONE`")
public class TcOne2one implements Serializable {

    private String charId;
    private Byte byteCol;
    private Short shortCol;
    private BigInteger longCol;
    private BigInteger bigintCol;
    private TpOne2one tpOne2one;

    @Id
    @Column(name = "`CHAR ID`", nullable = false, length = 1)
    public String getCharId() {
        return this.charId;
    }

    public void setCharId(String charId) {
        this.charId = charId;
    }

    @Column(name = "`BYTE COL`", nullable = true, scale = 0, precision = 2)
    public Byte getByteCol() {
        return this.byteCol;
    }

    public void setByteCol(Byte byteCol) {
        this.byteCol = byteCol;
    }

    @Column(name = "`SHORT COL`", nullable = true, scale = 0, precision = 5)
    public Short getShortCol() {
        return this.shortCol;
    }

    public void setShortCol(Short shortCol) {
        this.shortCol = shortCol;
    }

    @Column(name = "`LONG COL`", nullable = true, scale = 0, precision = 18)
    public BigInteger getLongCol() {
        return this.longCol;
    }

    public void setLongCol(BigInteger longCol) {
        this.longCol = longCol;
    }

    @Column(name = "`BIGINT COL`", nullable = true, scale = 0, precision = 35)
    public BigInteger getBigintCol() {
        return this.bigintCol;
    }

    public void setBigintCol(BigInteger bigintCol) {
        this.bigintCol = bigintCol;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CHAR ID`", referencedColumnName = "`CHAR ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TC_ONE2ONE_TO_TP_ONE2TEw9L`"))
    @Fetch(FetchMode.JOIN)
    public TpOne2one getTpOne2one() {
        return this.tpOne2one;
    }

    public void setTpOne2one(TpOne2one tpOne2one) {
        if(tpOne2one != null) {
            this.charId = tpOne2one.getCharId();
        }

        this.tpOne2one = tpOne2one;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TcOne2one)) return false;
        final TcOne2one tcOne2one = (TcOne2one) o;
        return Objects.equals(getCharId(), tcOne2one.getCharId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCharId());
    }
}