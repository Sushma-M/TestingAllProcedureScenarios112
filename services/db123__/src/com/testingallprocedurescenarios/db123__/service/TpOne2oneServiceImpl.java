/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.db123__.TcOne2one;
import com.testingallprocedurescenarios.db123__.TpOne2one;


/**
 * ServiceImpl object for domain model class TpOne2one.
 *
 * @see TpOne2one
 */
@Service("db123__.TpOne2oneService")
@Validated
public class TpOne2oneServiceImpl implements TpOne2oneService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TpOne2oneServiceImpl.class);


    @Autowired
    @Qualifier("db123__.TpOne2oneDao")
    private WMGenericDao<TpOne2one, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TpOne2one, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public TpOne2one create(TpOne2one tpOne2one) {
        LOGGER.debug("Creating a new TpOne2one with information: {}", tpOne2one);

        TcOne2one tcOne2one = tpOne2one.getTcOne2one();
        if(tcOne2one != null && Hibernate.isInitialized(tcOne2one)) {
            tcOne2one.setTpOne2one(tpOne2one);
        }

        TpOne2one tpOne2oneCreated = this.wmGenericDao.create(tpOne2one);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tpOne2oneCreated);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public TpOne2one getById(String tpone2oneId) {
        LOGGER.debug("Finding TpOne2one by id: {}", tpone2oneId);
        return this.wmGenericDao.findById(tpone2oneId);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public TpOne2one findById(String tpone2oneId) {
        LOGGER.debug("Finding TpOne2one by id: {}", tpone2oneId);
        try {
            return this.wmGenericDao.findById(tpone2oneId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TpOne2one found with id: {}", tpone2oneId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public List<TpOne2one> findByMultipleIds(List<String> tpone2oneIds, boolean orderedReturn) {
        LOGGER.debug("Finding TpOne2ones by ids: {}", tpone2oneIds);

        return this.wmGenericDao.findByMultipleIds(tpone2oneIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "db123__TransactionManager")
    @Override
    public TpOne2one update(TpOne2one tpOne2one) {
        LOGGER.debug("Updating TpOne2one with information: {}", tpOne2one);

        TcOne2one tcOne2one = tpOne2one.getTcOne2one();
        if(tcOne2one != null && Hibernate.isInitialized(tcOne2one)) {
            tcOne2one.setTpOne2one(tpOne2one);
        }

        this.wmGenericDao.update(tpOne2one);
        this.wmGenericDao.refresh(tpOne2one);

        return tpOne2one;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public TpOne2one delete(String tpone2oneId) {
        LOGGER.debug("Deleting TpOne2one with id: {}", tpone2oneId);
        TpOne2one deleted = this.wmGenericDao.findById(tpone2oneId);
        if (deleted == null) {
            LOGGER.debug("No TpOne2one found with id: {}", tpone2oneId);
            throw new EntityNotFoundException(String.valueOf(tpone2oneId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public void delete(TpOne2one tpOne2one) {
        LOGGER.debug("Deleting TpOne2one with {}", tpOne2one);
        this.wmGenericDao.delete(tpOne2one);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<TpOne2one> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TpOne2ones");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<TpOne2one> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TpOne2ones");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db123__ for table TpOne2one to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service db123__ for table TpOne2one to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}