/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.testingallprocedurescenarios.db123__.models.query.*;

@Service
public class Db123__QueryExecutorServiceImpl implements Db123__QueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Db123__QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("db123__WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "db123__TransactionManager")
    @Override
    public Integer executeSV_InsertQuery(SvInsertQueryRequest svInsertQueryRequest) {
        Map<String, Object> params = new HashMap<>(18);

        params.put("ASSIGNEDID", svInsertQueryRequest.getAssignedid());
        params.put("BYTECOL", svInsertQueryRequest.getBytecol());
        params.put("SHORTCOL", svInsertQueryRequest.getShortcol());
        params.put("INTCOL", svInsertQueryRequest.getIntcol());
        params.put("FLOATCOL", svInsertQueryRequest.getFloatcol());
        params.put("LONGCOL", svInsertQueryRequest.getLongcol());
        params.put("DOUBLECOL", svInsertQueryRequest.getDoublecol());
        params.put("BIGINTCOL", svInsertQueryRequest.getBigintcol());
        params.put("BIGDECCOL", svInsertQueryRequest.getBigdeccol());
        params.put("CHARCOL", svInsertQueryRequest.getCharcol());
        params.put("STRINGCOL", svInsertQueryRequest.getStringcol());
        params.put("TEXTCOL", svInsertQueryRequest.getTextcol());
        params.put("CLOBCOL", svInsertQueryRequest.getClobcol());
        params.put("DATECOL", svInsertQueryRequest.getDatecol());
        params.put("TIMECOL", svInsertQueryRequest.getTimecol());
        params.put("BOOLEANCOL", svInsertQueryRequest.getBooleancol());
        params.put("DATETIMECOL", svInsertQueryRequest.getDatetimecol());
        params.put("TIMESTAMPCOL", svInsertQueryRequest.getTimestampcol());

        return queryExecutor.executeNamedQueryForUpdate("SV_InsertQuery", params);
    }

    @Transactional(value = "db123__TransactionManager", readOnly = true)
    @Override
    public Page<HqlGetAllTypesResponse> executeHQL_GetAllTypes(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("HQL_GetAllTypes", params, HqlGetAllTypesResponse.class, pageable);
    }

    @Transactional(value = "db123__TransactionManager", readOnly = true)
    @Override
    public InputStream getBlobcolContentForHQL_GetAllTypes() throws EntityNotFoundException {
        Map<String, Object> params = new HashMap<>(0);


        HqlGetAllTypesResponse _result =  queryExecutor.executeNamedQuery("HQL_GetAllTypes", params, HqlGetAllTypesResponse.class);
        if(_result.getBlobcol() == null) {
            LOGGER.debug("Blob content not exists for blobcol in query HQL_GetAllTypes");
            throw new BlobContentNotFoundException("Blob content not found for blobcol in query HQL_GetAllTypes");
        }
        return new ByteArrayInputStream(_result.getBlobcol());
    }

    @Transactional(value = "db123__TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportHQL_GetAllTypes(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("HQL_GetAllTypes", params, HqlGetAllTypesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "db123__TransactionManager", readOnly = true)
    @Override
    public Page<SvLoggedinIdResponse> executeSV_LoggedinId(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SV_LoggedinId", params, SvLoggedinIdResponse.class, pageable);
    }

    @Transactional(value = "db123__TransactionManager", readOnly = true)
    @Override
    public InputStream getBlobColContentForSV_LoggedinId() throws EntityNotFoundException {
        Map<String, Object> params = new HashMap<>(0);


        SvLoggedinIdResponse _result =  queryExecutor.executeNamedQuery("SV_LoggedinId", params, SvLoggedinIdResponse.class);
        if(_result.getBlobCol() == null) {
            LOGGER.debug("Blob content not exists for blobCol in query SV_LoggedinId");
            throw new BlobContentNotFoundException("Blob content not found for blobCol in query SV_LoggedinId");
        }
        return new ByteArrayInputStream(_result.getBlobCol());
    }

    @Transactional(value = "db123__TransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_LoggedinId(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("SV_LoggedinId", params, SvLoggedinIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}