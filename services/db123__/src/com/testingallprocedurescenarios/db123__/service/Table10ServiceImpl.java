/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.db123__.Table10;


/**
 * ServiceImpl object for domain model class Table10.
 *
 * @see Table10
 */
@Service("db123__.Table10Service")
@Validated
public class Table10ServiceImpl implements Table10Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table10ServiceImpl.class);


    @Autowired
    @Qualifier("db123__.Table10Dao")
    private WMGenericDao<Table10, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table10, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public Table10 create(Table10 table10) {
        LOGGER.debug("Creating a new Table10 with information: {}", table10);

        Table10 table10Created = this.wmGenericDao.create(table10);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table10Created);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Table10 getById(Integer table10Id) {
        LOGGER.debug("Finding Table10 by id: {}", table10Id);
        return this.wmGenericDao.findById(table10Id);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Table10 findById(Integer table10Id) {
        LOGGER.debug("Finding Table10 by id: {}", table10Id);
        try {
            return this.wmGenericDao.findById(table10Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table10 found with id: {}", table10Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public List<Table10> findByMultipleIds(List<Integer> table10Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table10s by ids: {}", table10Ids);

        return this.wmGenericDao.findByMultipleIds(table10Ids, orderedReturn);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Table10 getByColumn3(Date column3) {
        Map<String, Object> column3Map = new HashMap<>();
        column3Map.put("column3", column3);

        LOGGER.debug("Finding Table10 by unique keys: {}", column3Map);
        return this.wmGenericDao.findByUniqueKey(column3Map);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "db123__TransactionManager")
    @Override
    public Table10 update(Table10 table10) {
        LOGGER.debug("Updating Table10 with information: {}", table10);

        this.wmGenericDao.update(table10);
        this.wmGenericDao.refresh(table10);

        return table10;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public Table10 delete(Integer table10Id) {
        LOGGER.debug("Deleting Table10 with id: {}", table10Id);
        Table10 deleted = this.wmGenericDao.findById(table10Id);
        if (deleted == null) {
            LOGGER.debug("No Table10 found with id: {}", table10Id);
            throw new EntityNotFoundException(String.valueOf(table10Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public void delete(Table10 table10) {
        LOGGER.debug("Deleting Table10 with {}", table10);
        this.wmGenericDao.delete(table10);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<Table10> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table10s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<Table10> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table10s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db123__ for table Table10 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service db123__ for table Table10 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}