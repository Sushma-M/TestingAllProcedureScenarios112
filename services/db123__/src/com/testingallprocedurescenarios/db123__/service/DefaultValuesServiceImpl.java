/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.db123__.DefaultValues;


/**
 * ServiceImpl object for domain model class DefaultValues.
 *
 * @see DefaultValues
 */
@Service("db123__.DefaultValuesService")
@Validated
public class DefaultValuesServiceImpl implements DefaultValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultValuesServiceImpl.class);


    @Autowired
    @Qualifier("db123__.DefaultValuesDao")
    private WMGenericDao<DefaultValues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DefaultValues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public DefaultValues create(DefaultValues defaultValues) {
        LOGGER.debug("Creating a new DefaultValues with information: {}", defaultValues);

        DefaultValues defaultValuesCreated = this.wmGenericDao.create(defaultValues);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(defaultValuesCreated);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public DefaultValues getById(Integer defaultvaluesId) {
        LOGGER.debug("Finding DefaultValues by id: {}", defaultvaluesId);
        return this.wmGenericDao.findById(defaultvaluesId);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public DefaultValues findById(Integer defaultvaluesId) {
        LOGGER.debug("Finding DefaultValues by id: {}", defaultvaluesId);
        try {
            return this.wmGenericDao.findById(defaultvaluesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DefaultValues found with id: {}", defaultvaluesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public List<DefaultValues> findByMultipleIds(List<Integer> defaultvaluesIds, boolean orderedReturn) {
        LOGGER.debug("Finding DefaultValues by ids: {}", defaultvaluesIds);

        return this.wmGenericDao.findByMultipleIds(defaultvaluesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "db123__TransactionManager")
    @Override
    public DefaultValues update(DefaultValues defaultValues) {
        LOGGER.debug("Updating DefaultValues with information: {}", defaultValues);

        this.wmGenericDao.update(defaultValues);
        this.wmGenericDao.refresh(defaultValues);

        return defaultValues;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public DefaultValues delete(Integer defaultvaluesId) {
        LOGGER.debug("Deleting DefaultValues with id: {}", defaultvaluesId);
        DefaultValues deleted = this.wmGenericDao.findById(defaultvaluesId);
        if (deleted == null) {
            LOGGER.debug("No DefaultValues found with id: {}", defaultvaluesId);
            throw new EntityNotFoundException(String.valueOf(defaultvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
    public void delete(DefaultValues defaultValues) {
        LOGGER.debug("Deleting DefaultValues with {}", defaultValues);
        this.wmGenericDao.delete(defaultValues);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<DefaultValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DefaultValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<DefaultValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DefaultValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db123__ for table DefaultValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service db123__ for table DefaultValues to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}