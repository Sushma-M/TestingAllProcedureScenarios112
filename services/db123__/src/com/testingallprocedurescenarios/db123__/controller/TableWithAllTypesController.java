/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.db123__.TableWithAllTypes;
import com.testingallprocedurescenarios.db123__.service.TableWithAllTypesService;


/**
 * Controller object for domain model class TableWithAllTypes.
 * @see TableWithAllTypes
 */
@RestController("db123__.TableWithAllTypesController")
@Api(value = "TableWithAllTypesController", description = "Exposes APIs to work with TableWithAllTypes resource.")
@RequestMapping("/db123__/TableWithAllTypes")
public class TableWithAllTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TableWithAllTypesController.class);

    @Autowired
	@Qualifier("db123__.TableWithAllTypesService")
	private TableWithAllTypesService tableWithAllTypesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TableWithAllTypes instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TableWithAllTypes createTableWithAllTypes(@RequestPart("wm_data_json") TableWithAllTypes tableWithAllTypes, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create TableWithAllTypes with information: {}" , tableWithAllTypes);

    tableWithAllTypes.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		tableWithAllTypes = tableWithAllTypesService.create(tableWithAllTypes);
		LOGGER.debug("Created TableWithAllTypes with information: {}" , tableWithAllTypes);

	    return tableWithAllTypes;
	}

    @ApiOperation(value = "Returns the TableWithAllTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TableWithAllTypes getTableWithAllTypes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TableWithAllTypes with id: {}" , id);

        TableWithAllTypes foundTableWithAllTypes = tableWithAllTypesService.getById(id);
        LOGGER.debug("TableWithAllTypes details with id: {}" , foundTableWithAllTypes);

        return foundTableWithAllTypes;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in TableWithAllTypes instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTableWithAllTypesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in TableWithAllTypes instance" , fieldName);

        if(!WMRuntimeUtils.isLob(TableWithAllTypes.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        TableWithAllTypes tableWithAllTypes = tableWithAllTypesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(tableWithAllTypes, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the TableWithAllTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TableWithAllTypes editTableWithAllTypes(@PathVariable("id") Integer id, @RequestBody TableWithAllTypes tableWithAllTypes) {
        LOGGER.debug("Editing TableWithAllTypes with id: {}" , tableWithAllTypes.getIdentityId());

        tableWithAllTypes.setIdentityId(id);
        tableWithAllTypes = tableWithAllTypesService.update(tableWithAllTypes);
        LOGGER.debug("TableWithAllTypes details with id: {}" , tableWithAllTypes);

        return tableWithAllTypes;
    }

    @ApiOperation(value = "Updates the TableWithAllTypes instance associated with the given id.This API should be used when TableWithAllTypes instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TableWithAllTypes editTableWithAllTypes(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        TableWithAllTypes newTableWithAllTypes = WMMultipartUtils.toObject(multipartHttpServletRequest, TableWithAllTypes.class, "db123__");
        newTableWithAllTypes.setIdentityId(id);

        TableWithAllTypes oldTableWithAllTypes = tableWithAllTypesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldTableWithAllTypes, newTableWithAllTypes);
        LOGGER.debug("Updating TableWithAllTypes with information: {}" , newTableWithAllTypes);

        return tableWithAllTypesService.update(newTableWithAllTypes);
    }

    @ApiOperation(value = "Deletes the TableWithAllTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTableWithAllTypes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TableWithAllTypes with id: {}" , id);

        TableWithAllTypes deletedTableWithAllTypes = tableWithAllTypesService.delete(id);

        return deletedTableWithAllTypes != null;
    }

    /**
     * @deprecated Use {@link #findTableWithAllTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TableWithAllTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TableWithAllTypes> searchTableWithAllTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TableWithAllTypes list by query filter:{}", (Object) queryFilters);
        return tableWithAllTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TableWithAllTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TableWithAllTypes> findTableWithAllTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TableWithAllTypes list by filter:", query);
        return tableWithAllTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TableWithAllTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TableWithAllTypes> filterTableWithAllTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TableWithAllTypes list by filter", query);
        return tableWithAllTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTableWithAllTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tableWithAllTypesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTableWithAllTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TableWithAllTypes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tableWithAllTypesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TableWithAllTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTableWithAllTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TableWithAllTypes");
		return tableWithAllTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTableWithAllTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tableWithAllTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TableWithAllTypesService instance
	 */
	protected void setTableWithAllTypesService(TableWithAllTypesService service) {
		this.tableWithAllTypesService = service;
	}

}