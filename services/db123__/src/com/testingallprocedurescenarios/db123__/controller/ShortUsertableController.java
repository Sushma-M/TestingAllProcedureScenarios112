/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.db123__.ShortUsertable;
import com.testingallprocedurescenarios.db123__.service.ShortUsertableService;


/**
 * Controller object for domain model class ShortUsertable.
 * @see ShortUsertable
 */
@RestController("db123__.ShortUsertableController")
@Api(value = "ShortUsertableController", description = "Exposes APIs to work with ShortUsertable resource.")
@RequestMapping("/db123__/ShortUsertable")
public class ShortUsertableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ShortUsertableController.class);

    @Autowired
	@Qualifier("db123__.ShortUsertableService")
	private ShortUsertableService shortUsertableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ShortUsertable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ShortUsertable createShortUsertable(@RequestBody ShortUsertable shortUsertable) {
		LOGGER.debug("Create ShortUsertable with information: {}" , shortUsertable);

		shortUsertable = shortUsertableService.create(shortUsertable);
		LOGGER.debug("Created ShortUsertable with information: {}" , shortUsertable);

	    return shortUsertable;
	}

    @ApiOperation(value = "Returns the ShortUsertable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ShortUsertable getShortUsertable(@PathVariable("id") Short id) {
        LOGGER.debug("Getting ShortUsertable with id: {}" , id);

        ShortUsertable foundShortUsertable = shortUsertableService.getById(id);
        LOGGER.debug("ShortUsertable details with id: {}" , foundShortUsertable);

        return foundShortUsertable;
    }

    @ApiOperation(value = "Updates the ShortUsertable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ShortUsertable editShortUsertable(@PathVariable("id") Short id, @RequestBody ShortUsertable shortUsertable) {
        LOGGER.debug("Editing ShortUsertable with id: {}" , shortUsertable.getUserId());

        shortUsertable.setUserId(id);
        shortUsertable = shortUsertableService.update(shortUsertable);
        LOGGER.debug("ShortUsertable details with id: {}" , shortUsertable);

        return shortUsertable;
    }

    @ApiOperation(value = "Deletes the ShortUsertable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteShortUsertable(@PathVariable("id") Short id) {
        LOGGER.debug("Deleting ShortUsertable with id: {}" , id);

        ShortUsertable deletedShortUsertable = shortUsertableService.delete(id);

        return deletedShortUsertable != null;
    }

    /**
     * @deprecated Use {@link #findShortUsertables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ShortUsertable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ShortUsertable> searchShortUsertablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ShortUsertables list by query filter:{}", (Object) queryFilters);
        return shortUsertableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ShortUsertable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ShortUsertable> findShortUsertables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ShortUsertables list by filter:", query);
        return shortUsertableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ShortUsertable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ShortUsertable> filterShortUsertables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ShortUsertables list by filter", query);
        return shortUsertableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportShortUsertables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return shortUsertableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportShortUsertablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ShortUsertable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> shortUsertableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ShortUsertable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countShortUsertables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ShortUsertables");
		return shortUsertableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getShortUsertableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return shortUsertableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ShortUsertableService instance
	 */
	protected void setShortUsertableService(ShortUsertableService service) {
		this.shortUsertableService = service;
	}

}