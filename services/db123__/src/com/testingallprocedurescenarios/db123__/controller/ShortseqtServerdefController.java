/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.db123__.ShortseqtServerdef;
import com.testingallprocedurescenarios.db123__.service.ShortseqtServerdefService;


/**
 * Controller object for domain model class ShortseqtServerdef.
 * @see ShortseqtServerdef
 */
@RestController("db123__.ShortseqtServerdefController")
@Api(value = "ShortseqtServerdefController", description = "Exposes APIs to work with ShortseqtServerdef resource.")
@RequestMapping("/db123__/ShortseqtServerdef")
public class ShortseqtServerdefController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ShortseqtServerdefController.class);

    @Autowired
	@Qualifier("db123__.ShortseqtServerdefService")
	private ShortseqtServerdefService shortseqtServerdefService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ShortseqtServerdef instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ShortseqtServerdef createShortseqtServerdef(@RequestBody ShortseqtServerdef shortseqtServerdef) {
		LOGGER.debug("Create ShortseqtServerdef with information: {}" , shortseqtServerdef);

		shortseqtServerdef = shortseqtServerdefService.create(shortseqtServerdef);
		LOGGER.debug("Created ShortseqtServerdef with information: {}" , shortseqtServerdef);

	    return shortseqtServerdef;
	}

    @ApiOperation(value = "Returns the ShortseqtServerdef instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ShortseqtServerdef getShortseqtServerdef(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ShortseqtServerdef with id: {}" , id);

        ShortseqtServerdef foundShortseqtServerdef = shortseqtServerdefService.getById(id);
        LOGGER.debug("ShortseqtServerdef details with id: {}" , foundShortseqtServerdef);

        return foundShortseqtServerdef;
    }

    @ApiOperation(value = "Updates the ShortseqtServerdef instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ShortseqtServerdef editShortseqtServerdef(@PathVariable("id") Integer id, @RequestBody ShortseqtServerdef shortseqtServerdef) {
        LOGGER.debug("Editing ShortseqtServerdef with id: {}" , shortseqtServerdef.getShortid());

        shortseqtServerdef.setShortid(id);
        shortseqtServerdef = shortseqtServerdefService.update(shortseqtServerdef);
        LOGGER.debug("ShortseqtServerdef details with id: {}" , shortseqtServerdef);

        return shortseqtServerdef;
    }

    @ApiOperation(value = "Deletes the ShortseqtServerdef instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteShortseqtServerdef(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ShortseqtServerdef with id: {}" , id);

        ShortseqtServerdef deletedShortseqtServerdef = shortseqtServerdefService.delete(id);

        return deletedShortseqtServerdef != null;
    }

    /**
     * @deprecated Use {@link #findShortseqtServerdefs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ShortseqtServerdef instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ShortseqtServerdef> searchShortseqtServerdefsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ShortseqtServerdefs list by query filter:{}", (Object) queryFilters);
        return shortseqtServerdefService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ShortseqtServerdef instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ShortseqtServerdef> findShortseqtServerdefs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ShortseqtServerdefs list by filter:", query);
        return shortseqtServerdefService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ShortseqtServerdef instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ShortseqtServerdef> filterShortseqtServerdefs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ShortseqtServerdefs list by filter", query);
        return shortseqtServerdefService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportShortseqtServerdefs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return shortseqtServerdefService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportShortseqtServerdefsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ShortseqtServerdef.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> shortseqtServerdefService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ShortseqtServerdef instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countShortseqtServerdefs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ShortseqtServerdefs");
		return shortseqtServerdefService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getShortseqtServerdefAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return shortseqtServerdefService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ShortseqtServerdefService instance
	 */
	protected void setShortseqtServerdefService(ShortseqtServerdefService service) {
		this.shortseqtServerdefService = service;
	}

}