/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.db123__.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testingallprocedurescenarios.db123__.TcOne2one;
import com.testingallprocedurescenarios.db123__.service.TcOne2oneService;


/**
 * Controller object for domain model class TcOne2one.
 * @see TcOne2one
 */
@RestController("db123__.TcOne2oneController")
@Api(value = "TcOne2oneController", description = "Exposes APIs to work with TcOne2one resource.")
@RequestMapping("/db123__/TcOne2one")
public class TcOne2oneController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TcOne2oneController.class);

    @Autowired
	@Qualifier("db123__.TcOne2oneService")
	private TcOne2oneService tcOne2oneService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TcOne2one instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TcOne2one createTcOne2one(@RequestBody TcOne2one tcOne2one) {
		LOGGER.debug("Create TcOne2one with information: {}" , tcOne2one);

		tcOne2one = tcOne2oneService.create(tcOne2one);
		LOGGER.debug("Created TcOne2one with information: {}" , tcOne2one);

	    return tcOne2one;
	}

    @ApiOperation(value = "Returns the TcOne2one instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TcOne2one getTcOne2one(@PathVariable("id") String id) {
        LOGGER.debug("Getting TcOne2one with id: {}" , id);

        TcOne2one foundTcOne2one = tcOne2oneService.getById(id);
        LOGGER.debug("TcOne2one details with id: {}" , foundTcOne2one);

        return foundTcOne2one;
    }

    @ApiOperation(value = "Updates the TcOne2one instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TcOne2one editTcOne2one(@PathVariable("id") String id, @RequestBody TcOne2one tcOne2one) {
        LOGGER.debug("Editing TcOne2one with id: {}" , tcOne2one.getCharId());

        tcOne2one.setCharId(id);
        tcOne2one = tcOne2oneService.update(tcOne2one);
        LOGGER.debug("TcOne2one details with id: {}" , tcOne2one);

        return tcOne2one;
    }

    @ApiOperation(value = "Deletes the TcOne2one instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTcOne2one(@PathVariable("id") String id) {
        LOGGER.debug("Deleting TcOne2one with id: {}" , id);

        TcOne2one deletedTcOne2one = tcOne2oneService.delete(id);

        return deletedTcOne2one != null;
    }

    /**
     * @deprecated Use {@link #findTcOne2ones(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TcOne2one instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TcOne2one> searchTcOne2onesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TcOne2ones list by query filter:{}", (Object) queryFilters);
        return tcOne2oneService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TcOne2one instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TcOne2one> findTcOne2ones(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TcOne2ones list by filter:", query);
        return tcOne2oneService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TcOne2one instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TcOne2one> filterTcOne2ones(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TcOne2ones list by filter", query);
        return tcOne2oneService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTcOne2ones(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tcOne2oneService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTcOne2onesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TcOne2one.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tcOne2oneService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TcOne2one instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTcOne2ones( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TcOne2ones");
		return tcOne2oneService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTcOne2oneAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tcOne2oneService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TcOne2oneService instance
	 */
	protected void setTcOne2oneService(TcOne2oneService service) {
		this.tcOne2oneService = service;
	}

}