/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * JobHistory generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`JOB_HISTORY`")
@IdClass(JobHistoryId.class)
public class JobHistory implements Serializable {

    private Integer employeeId;
    private LocalDateTime startDate;
    private LocalDateTime endDate;
    private String jobId;
    private Short departmentId;
    private Departments departments;
    private Employees employees;
    private Jobs jobs;

    @Id
    @Column(name = "`EMPLOYEE_ID`", nullable = false, scale = 0, precision = 6)
    public Integer getEmployeeId() {
        return this.employeeId;
    }

    public void setEmployeeId(Integer employeeId) {
        this.employeeId = employeeId;
    }

    @Id
    @Column(name = "`START_DATE`", nullable = false)
    public LocalDateTime getStartDate() {
        return this.startDate;
    }

    public void setStartDate(LocalDateTime startDate) {
        this.startDate = startDate;
    }

    @Column(name = "`END_DATE`", nullable = false)
    public LocalDateTime getEndDate() {
        return this.endDate;
    }

    public void setEndDate(LocalDateTime endDate) {
        this.endDate = endDate;
    }

    @Column(name = "`JOB_ID`", nullable = false, length = 10)
    public String getJobId() {
        return this.jobId;
    }

    public void setJobId(String jobId) {
        this.jobId = jobId;
    }

    @Column(name = "`DEPARTMENT_ID`", nullable = true, scale = 0, precision = 4)
    public Short getDepartmentId() {
        return this.departmentId;
    }

    public void setDepartmentId(Short departmentId) {
        this.departmentId = departmentId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`DEPARTMENT_ID`", referencedColumnName = "`DEPARTMENT_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`JHIST_DEPT_FK`"))
    @Fetch(FetchMode.JOIN)
    public Departments getDepartments() {
        return this.departments;
    }

    public void setDepartments(Departments departments) {
        if(departments != null) {
            this.departmentId = departments.getDepartmentId();
        }

        this.departments = departments;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`EMPLOYEE_ID`", referencedColumnName = "`EMPLOYEE_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`JHIST_EMP_FK`"))
    @Fetch(FetchMode.JOIN)
    public Employees getEmployees() {
        return this.employees;
    }

    public void setEmployees(Employees employees) {
        if(employees != null) {
            this.employeeId = employees.getEmployeeId();
        }

        this.employees = employees;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`JOB_ID`", referencedColumnName = "`JOB_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`JHIST_JOB_FK`"))
    @Fetch(FetchMode.JOIN)
    public Jobs getJobs() {
        return this.jobs;
    }

    public void setJobs(Jobs jobs) {
        if(jobs != null) {
            this.jobId = jobs.getJobId();
        }

        this.jobs = jobs;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof JobHistory)) return false;
        final JobHistory jobHistory = (JobHistory) o;
        return Objects.equals(getEmployeeId(), jobHistory.getEmployeeId()) &&
                Objects.equals(getStartDate(), jobHistory.getStartDate());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getEmployeeId(),
                getStartDate());
    }
}