/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Countries generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`COUNTRIES`")
public class Countries implements Serializable {

    private String countryId;
    private String countryName;
    private BigInteger regionId;
    private Regions regions;
    private List<Locations> locationses;

    @Id
    @Column(name = "`COUNTRY_ID`", nullable = false, length = 2)
    public String getCountryId() {
        return this.countryId;
    }

    public void setCountryId(String countryId) {
        this.countryId = countryId;
    }

    @Column(name = "`COUNTRY_NAME`", nullable = true, length = 40)
    public String getCountryName() {
        return this.countryName;
    }

    public void setCountryName(String countryName) {
        this.countryName = countryName;
    }

    @Column(name = "`REGION_ID`", nullable = true, scale = 0, precision = 38)
    public BigInteger getRegionId() {
        return this.regionId;
    }

    public void setRegionId(BigInteger regionId) {
        this.regionId = regionId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`REGION_ID`", referencedColumnName = "`REGION_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`COUNTR_REG_FK`"))
    @Fetch(FetchMode.JOIN)
    public Regions getRegions() {
        return this.regions;
    }

    public void setRegions(Regions regions) {
        if(regions != null) {
            this.regionId = regions.getRegionId();
        }

        this.regions = regions;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "countries")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Locations> getLocationses() {
        return this.locationses;
    }

    public void setLocationses(List<Locations> locationses) {
        this.locationses = locationses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Countries)) return false;
        final Countries countries = (Countries) o;
        return Objects.equals(getCountryId(), countries.getCountryId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCountryId());
    }
}