/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Departments generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`DEPARTMENTS`")
public class Departments implements Serializable {

    private Short departmentId;
    private String departmentName;
    private Integer managerId;
    private Short locationId;
    private Locations locations;
    private Employees employeesByManagerId;
    private List<Employees> employeesesForDepartmentId;
    private List<JobHistory> jobHistories;

    @Id
    @Column(name = "`DEPARTMENT_ID`", nullable = false, scale = 0, precision = 4)
    public Short getDepartmentId() {
        return this.departmentId;
    }

    public void setDepartmentId(Short departmentId) {
        this.departmentId = departmentId;
    }

    @Column(name = "`DEPARTMENT_NAME`", nullable = false, length = 30)
    public String getDepartmentName() {
        return this.departmentName;
    }

    public void setDepartmentName(String departmentName) {
        this.departmentName = departmentName;
    }

    @Column(name = "`MANAGER_ID`", nullable = true, scale = 0, precision = 6)
    public Integer getManagerId() {
        return this.managerId;
    }

    public void setManagerId(Integer managerId) {
        this.managerId = managerId;
    }

    @Column(name = "`LOCATION_ID`", nullable = true, scale = 0, precision = 4)
    public Short getLocationId() {
        return this.locationId;
    }

    public void setLocationId(Short locationId) {
        this.locationId = locationId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`LOCATION_ID`", referencedColumnName = "`LOCATION_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`DEPT_LOC_FK`"))
    @Fetch(FetchMode.JOIN)
    public Locations getLocations() {
        return this.locations;
    }

    public void setLocations(Locations locations) {
        if(locations != null) {
            this.locationId = locations.getLocationId();
        }

        this.locations = locations;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`MANAGER_ID`", referencedColumnName = "`EMPLOYEE_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`DEPT_MGR_FK`"))
    @Fetch(FetchMode.JOIN)
    public Employees getEmployeesByManagerId() {
        return this.employeesByManagerId;
    }

    public void setEmployeesByManagerId(Employees employeesByManagerId) {
        if(employeesByManagerId != null) {
            this.managerId = employeesByManagerId.getEmployeeId();
        }

        this.employeesByManagerId = employeesByManagerId;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "departmentsByDepartmentId")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Employees> getEmployeesesForDepartmentId() {
        return this.employeesesForDepartmentId;
    }

    public void setEmployeesesForDepartmentId(List<Employees> employeesesForDepartmentId) {
        this.employeesesForDepartmentId = employeesesForDepartmentId;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "departments")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<JobHistory> getJobHistories() {
        return this.jobHistories;
    }

    public void setJobHistories(List<JobHistory> jobHistories) {
        this.jobHistories = jobHistories;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Departments)) return false;
        final Departments departments = (Departments) o;
        return Objects.equals(getDepartmentId(), departments.getDepartmentId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getDepartmentId());
    }
}