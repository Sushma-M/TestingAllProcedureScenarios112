/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Employees generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`EMPLOYEES`", uniqueConstraints = {
            @UniqueConstraint(name = "`EMP_EMAIL_UK`", columnNames = {"`EMAIL`"})})
public class Employees implements Serializable {

    private Integer employeeId;
    private String firstName;
    private String lastName;
    private String email;
    private String phoneNumber;
    private LocalDateTime hireDate;
    private String jobId;
    private Float salary;
    private Float commissionPct;
    private Integer managerId;
    private Short departmentId;
    private Employees employeesByManagerId;
    private Jobs jobs;
    private Departments departmentsByDepartmentId;
    private List<Departments> departmentsesForManagerId;
    private List<Employees> employeesesForManagerId;
    private List<JobHistory> jobHistories;

    @Id
    @Column(name = "`EMPLOYEE_ID`", nullable = false, scale = 0, precision = 6)
    public Integer getEmployeeId() {
        return this.employeeId;
    }

    public void setEmployeeId(Integer employeeId) {
        this.employeeId = employeeId;
    }

    @Column(name = "`FIRST_NAME`", nullable = true, length = 20)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "`LAST_NAME`", nullable = false, length = 25)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "`EMAIL`", nullable = false, length = 25)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "`PHONE_NUMBER`", nullable = true, length = 20)
    public String getPhoneNumber() {
        return this.phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @Column(name = "`HIRE_DATE`", nullable = false)
    public LocalDateTime getHireDate() {
        return this.hireDate;
    }

    public void setHireDate(LocalDateTime hireDate) {
        this.hireDate = hireDate;
    }

    @Column(name = "`JOB_ID`", nullable = false, length = 10)
    public String getJobId() {
        return this.jobId;
    }

    public void setJobId(String jobId) {
        this.jobId = jobId;
    }

    @Column(name = "`SALARY`", nullable = true, scale = 2, precision = 8)
    public Float getSalary() {
        return this.salary;
    }

    public void setSalary(Float salary) {
        this.salary = salary;
    }

    @Column(name = "`COMMISSION_PCT`", nullable = true, scale = 2, precision = 2)
    public Float getCommissionPct() {
        return this.commissionPct;
    }

    public void setCommissionPct(Float commissionPct) {
        this.commissionPct = commissionPct;
    }

    @Column(name = "`MANAGER_ID`", nullable = true, scale = 0, precision = 6)
    public Integer getManagerId() {
        return this.managerId;
    }

    public void setManagerId(Integer managerId) {
        this.managerId = managerId;
    }

    @Column(name = "`DEPARTMENT_ID`", nullable = true, scale = 0, precision = 4)
    public Short getDepartmentId() {
        return this.departmentId;
    }

    public void setDepartmentId(Short departmentId) {
        this.departmentId = departmentId;
    }

    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"employeesByManagerId", "employeesesForManagerId"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`MANAGER_ID`", referencedColumnName = "`EMPLOYEE_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`EMP_MANAGER_FK`"))
    @Fetch(FetchMode.JOIN)
    public Employees getEmployeesByManagerId() {
        return this.employeesByManagerId;
    }

    public void setEmployeesByManagerId(Employees employeesByManagerId) {
        if(employeesByManagerId != null) {
            this.managerId = employeesByManagerId.getEmployeeId();
        }

        this.employeesByManagerId = employeesByManagerId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`JOB_ID`", referencedColumnName = "`JOB_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`EMP_JOB_FK`"))
    @Fetch(FetchMode.JOIN)
    public Jobs getJobs() {
        return this.jobs;
    }

    public void setJobs(Jobs jobs) {
        if(jobs != null) {
            this.jobId = jobs.getJobId();
        }

        this.jobs = jobs;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`DEPARTMENT_ID`", referencedColumnName = "`DEPARTMENT_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`EMP_DEPT_FK`"))
    @Fetch(FetchMode.JOIN)
    public Departments getDepartmentsByDepartmentId() {
        return this.departmentsByDepartmentId;
    }

    public void setDepartmentsByDepartmentId(Departments departmentsByDepartmentId) {
        if(departmentsByDepartmentId != null) {
            this.departmentId = departmentsByDepartmentId.getDepartmentId();
        }

        this.departmentsByDepartmentId = departmentsByDepartmentId;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "employeesByManagerId")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Departments> getDepartmentsesForManagerId() {
        return this.departmentsesForManagerId;
    }

    public void setDepartmentsesForManagerId(List<Departments> departmentsesForManagerId) {
        this.departmentsesForManagerId = departmentsesForManagerId;
    }

    // ignoring self relation properties to avoid circular loops & unwanted fields from the related entity.
    @JsonIgnoreProperties({"employeesByManagerId", "employeesesForManagerId"})
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "employeesByManagerId")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Employees> getEmployeesesForManagerId() {
        return this.employeesesForManagerId;
    }

    public void setEmployeesesForManagerId(List<Employees> employeesesForManagerId) {
        this.employeesesForManagerId = employeesesForManagerId;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "employees")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<JobHistory> getJobHistories() {
        return this.jobHistories;
    }

    public void setJobHistories(List<JobHistory> jobHistories) {
        this.jobHistories = jobHistories;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Employees)) return false;
        final Employees employees = (Employees) o;
        return Objects.equals(getEmployeeId(), employees.getEmployeeId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getEmployeeId());
    }
}