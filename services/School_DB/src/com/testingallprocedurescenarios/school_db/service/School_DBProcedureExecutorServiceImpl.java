/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;

import com.testingallprocedurescenarios.school_db.models.procedure.*;

@Service
public class School_DBProcedureExecutorServiceImpl implements School_DBProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(School_DBProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("School_DBWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public Scenario3Response executeScenario3(Integer var) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("var", var);

        return procedureExecutor.executeNamedProcedure("Scenario3", params, Scenario3Response.class);
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public ProcedureBooleanResponse executeProcedure_Boolean(Boolean present) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("present", present);

        return procedureExecutor.executeNamedProcedure("Procedure_Boolean", params, ProcedureBooleanResponse.class);
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public Scenario2Response executeScenario2(String academicyear) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("academicyear", academicyear);

        return procedureExecutor.executeNamedProcedure("Scenario2", params, Scenario2Response.class);
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public Scenario1Response executeScenario1(String academicyear) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("ACADEMICYEAR", academicyear);

        return procedureExecutor.executeNamedProcedure("Scenario1", params, Scenario1Response.class);
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public Scenario7Response executeScenario7(Integer var) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("var", var);

        return procedureExecutor.executeNamedProcedure("Scenario7", params, Scenario7Response.class);
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public Scenario6Response executeScenario6() {
        Map<String, Object> params = new HashMap<>(0);


        return procedureExecutor.executeNamedProcedure("Scenario6", params, Scenario6Response.class);
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public Scenario5Response executeScenario5(String academicyear) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("academicyear", academicyear);

        return procedureExecutor.executeNamedProcedure("Scenario5", params, Scenario5Response.class);
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public Scenario4Response executeScenario4(String academicYear) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("academicYear", academicYear);

        return procedureExecutor.executeNamedProcedure("Scenario4", params, Scenario4Response.class);
    }

}