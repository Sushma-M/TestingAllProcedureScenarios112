/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingallprocedurescenarios.school_db.SchoolEvents;
import com.testingallprocedurescenarios.school_db.SchoolEventsId;


/**
 * ServiceImpl object for domain model class SchoolEvents.
 *
 * @see SchoolEvents
 */
@Service("School_DB.SchoolEventsService")
@Validated
public class SchoolEventsServiceImpl implements SchoolEventsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SchoolEventsServiceImpl.class);


    @Autowired
    @Qualifier("School_DB.SchoolEventsDao")
    private WMGenericDao<SchoolEvents, SchoolEventsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SchoolEvents, SchoolEventsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public SchoolEvents create(SchoolEvents schoolEvents) {
        LOGGER.debug("Creating a new SchoolEvents with information: {}", schoolEvents);

        SchoolEvents schoolEventsCreated = this.wmGenericDao.create(schoolEvents);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(schoolEventsCreated);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public SchoolEvents getById(SchoolEventsId schooleventsId) {
        LOGGER.debug("Finding SchoolEvents by id: {}", schooleventsId);
        return this.wmGenericDao.findById(schooleventsId);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public SchoolEvents findById(SchoolEventsId schooleventsId) {
        LOGGER.debug("Finding SchoolEvents by id: {}", schooleventsId);
        try {
            return this.wmGenericDao.findById(schooleventsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SchoolEvents found with id: {}", schooleventsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public List<SchoolEvents> findByMultipleIds(List<SchoolEventsId> schooleventsIds, boolean orderedReturn) {
        LOGGER.debug("Finding SchoolEvents by ids: {}", schooleventsIds);

        return this.wmGenericDao.findByMultipleIds(schooleventsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "School_DBTransactionManager")
    @Override
    public SchoolEvents update(SchoolEvents schoolEvents) {
        LOGGER.debug("Updating SchoolEvents with information: {}", schoolEvents);

        this.wmGenericDao.update(schoolEvents);
        this.wmGenericDao.refresh(schoolEvents);

        return schoolEvents;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public SchoolEvents delete(SchoolEventsId schooleventsId) {
        LOGGER.debug("Deleting SchoolEvents with id: {}", schooleventsId);
        SchoolEvents deleted = this.wmGenericDao.findById(schooleventsId);
        if (deleted == null) {
            LOGGER.debug("No SchoolEvents found with id: {}", schooleventsId);
            throw new EntityNotFoundException(String.valueOf(schooleventsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
    public void delete(SchoolEvents schoolEvents) {
        LOGGER.debug("Deleting SchoolEvents with {}", schoolEvents);
        this.wmGenericDao.delete(schoolEvents);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<SchoolEvents> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SchoolEvents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<SchoolEvents> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SchoolEvents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service School_DB for table SchoolEvents to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service School_DB for table SchoolEvents to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}