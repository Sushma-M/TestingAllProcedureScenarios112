/*Generated by WaveMaker Studio*/
package com.testingallprocedurescenarios.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testingallprocedurescenarios.school_db.service.School_DBProcedureExecutorService;
import com.testingallprocedurescenarios.school_db.models.procedure.*;

@RestController(value = "School_DB.ProcedureExecutionController")
@RequestMapping("/School_DB/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private School_DBProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/Scenario3", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "scenario3_Without_INOUT_CURSOR")
    public Scenario3Response executeScenario3(@RequestParam(value = "var") Integer var, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Scenario3");
        Scenario3Response _result = procedureService.executeScenario3(var);
        LOGGER.debug("got the result for named procedure: Scenario3, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Procedure_Boolean", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Boolean Procedure")
    public ProcedureBooleanResponse executeProcedure_Boolean(@RequestParam(value = "present") Boolean present, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Procedure_Boolean");
        ProcedureBooleanResponse _result = procedureService.executeProcedure_Boolean(present);
        LOGGER.debug("got the result for named procedure: Procedure_Boolean, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Scenario2", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "With Inout Without Cursor")
    public Scenario2Response executeScenario2(@RequestParam(value = "academicyear") String academicyear, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Scenario2");
        Scenario2Response _result = procedureService.executeScenario2(academicyear);
        LOGGER.debug("got the result for named procedure: Scenario2, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Scenario1", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Without INOUT But Having Cursor")
    public Scenario1Response executeScenario1(@RequestParam(value = "ACADEMICYEAR") String academicyear, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Scenario1");
        Scenario1Response _result = procedureService.executeScenario1(academicyear);
        LOGGER.debug("got the result for named procedure: Scenario1, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Scenario7", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "WITH INOUT")
    public Scenario7Response executeScenario7(@RequestParam(value = "var") Integer var, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Scenario7");
        Scenario7Response _result = procedureService.executeScenario7(var);
        LOGGER.debug("got the result for named procedure: Scenario7, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Scenario6", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Two Cursors")
    public Scenario6Response executeScenario6(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Scenario6");
        Scenario6Response _result = procedureService.executeScenario6();
        LOGGER.debug("got the result for named procedure: Scenario6, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Scenario5", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SCENARIO5_WITH_CURSOR_SELECTQuery")
    public Scenario5Response executeScenario5(@RequestParam(value = "academicyear") String academicyear, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Scenario5");
        Scenario5Response _result = procedureService.executeScenario5(academicyear);
        LOGGER.debug("got the result for named procedure: Scenario5, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/Scenario4", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "With INOUT")
    public Scenario4Response executeScenario4(@RequestParam(value = "academicYear") String academicYear, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: Scenario4");
        Scenario4Response _result = procedureService.executeScenario4(academicYear);
        LOGGER.debug("got the result for named procedure: Scenario4, result:{}", _result);
        return _result;
    }

}